# -*- coding: utf-8 -*-
import os
import sys
import json
import random
import re
import base64
import shutil
from io import BytesIO
import html 
import aiohttp
import nest_asyncio

from flask import Flask
from telegram.constants import ChatAction
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.helpers import mention_html, escape_markdown
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

import logging

# Logger setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
nest_asyncio.apply()




TOKEN = "8323659076:AAE4vDWIPxPxesfgYv5be5qHPQymxP8qDoA"
OWNER_USERNAME = "@Lord_MentorRainn"
OWNER_ID = 7507031482
CHANNEL_ID = -1002153191249  
GROUP_ID = -1001234567890  # рђърђёрђирђ║ group id
GROUP_ID_FILE = "group_id.txt"
LOG_FILE = "send_logs.json"
MAX_LOGS = 5000
GROUP_FILE = "groups.json"
ADMIN_FILE = "admins.json"
ADMIN_IDS = [7808603044, 987654321] 
# Default group IDs (empty for now)
# Default admin user IDs
DEFAULT_ADMINS = [
    
]

ADMINS = set(DEFAULT_ADMINS)


# ===== Runtime Variables =====
ADMINS = set(DEFAULT_ADMINS)
BANNED_ADMINS = set()

ACTIVE_ATTACKS = {}
attacking_users = {}  # chat_id -> set of targets
attack_tasks = {}
secret_attack_targets = set()
attack_targets = {}
attack_speed = 0.3 # default delay in seconds
hidden_targets = set()  # hidden/secret attack mode
active_fight_sessions = {}  # chat_id: {user1_id: user2_id, user2_id: user1_id}
user_limits = {}  # username_lower: remaining uses
nicknames = {}  # user_id: nickname

# Offensive auto-replies
auto_replies = [ "рђЋрђ╝рђърђгрђћрђгрђєрђГрђ»рђљрђ▓рђирђърђЂрђёрђ║рђєрђ▓рђЏрђёрђ║рђЎрђёрђ║рђИрђљрђГрђ»рђирђёрђ╝рђГрђЎрђ║рђЂрђХрђЏрђЎрђџрђ║рђєрђГрђ»рђљрђгрђЎрђёрђ║рђИрђљрђГрђ»рђирђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђђрђ╝рђ«рђИрђЎрђърђёрђ║рђЋрђ▒рђИрђЉрђгрђИрђўрђ░рђИрђюрђгрђИ", "рђЎрђёрђ║рђИрђАрђќрђ▒рђђрђЋрђГрђ»рђђрђ║рђєрђХрђюрђГрђ»рђюрђГрђ»рђирђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рђёрђФрђћрђ▓рђирђЋрђ▒рђИрђюрђГрђ»рђИрђЋрђ╝рђ«рђИрђЎрђёрђ║рђИрђЉрђйрђђрђ║рђюрђгрђљрђгрђюрђ▒рђърђгрђИрђЎрђГрђ»рђђрђ║", "рђЎрђёрђ║рђИрђЁрђ▒рђгрђ║рђќрђгрђърђірђ║рђЎрђЋрђ▒рђИрђўрђ»рђЋрђФрђюрђгрђИрђюрђйрђљрђ║рђюрђГрђ»рђђрђ║Рђїрђ▒рђћрђгрђ║рђАрђЏрђЙрђёрђ║рђърђЂрђёрђ║рђЋрђ╝рђърђгрђћрђгрђєрђ«рђђрђГрђ»рђюрђ▒", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђђрђГрђ»рђёрђФрђирђєрђ«рђюрђГрђёрђ║рђђрђ╗рђйрђћрђ║рђАрђќрђ╝рђЁрђ║рђЂрђЁрђгрђИрђћрђ▒рђЏрђљрђџрђ║", "рђўрђгрђўрђгрђљрђ▒рђгрђёрђ║рђИрђЋрђћрђ║рђљрђџрђ║рђЪрђ»рђљрђ║рђюрђгрђИ рђЂрђ╝рђ▒рђЉрђ▒рђгрђђрђ║рђЉрђГрђљрђ▒рђгрђёрђ║рђИрђЋрђћрђ║рђюрђ▒", "рђЪрђђрђ║рђђрђюрђЁрђ║рђЂрђйрђ▒рђИрђЎрђёрђ║рђИрђђрђюрђЁрђ║рђђрђ╝рђ«рђИрђђрђћрђЙрђ▒рђИрђђрђйрђ▒рђИрђћрђ▒рђљрђгрђўрђ▓TypingрђєрђГрђ»рђЏрђёрђ║рђљрђ▒рђгрђирђюрђГрђЋрђ║рђѓрђйрђёрђ║рђИрђЉрђ»рђЎрђЙрђЋрђ╝рђ«рђИрђЎрђџрђирђ║рђђрђ▒рђгрђёрђ║", "рђёрђФрђЏрђ▓рђирђЁрђгрђђрђГрђ»рђЂрђ╗рђ▒рђЋрђќрђГрђ»рђирђЎрђёрђ║рђИрђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђђрђ╝рђ«рђИрђђрђЎрђърђёрђ║рђЋрђ▒рђИрђЉрђгрђИрђўрђ░рђИрђюрђ▒рђђрђйрђг", "рђЎрђёрђ║рђИрђЁрђђрђ▒рђИрђђрђњрђФрђЋрђ▓рђюрђгрђИрђќрђгрђърђірђ║рђЎрђърђгрђИрђђрђГрђ»рђђрђ║рђАрђ»рђћрђ║рђИ", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђЎрђёрђ║рђИрђђрђђрђ╝рђ▒рђгрђђрђ║рђђрђћрђ║рђђрђћрђ║рђљрђгрђюрђгрђИрђАрђђрђ║рђљрђгрђђ", "рђўрђгрђљрђйрђ▒рђЋрђ╝рђ▒рђгрђћрђ▒рђљрђгрђњрђ«рђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђѓрђ▒рђФрђђрђ║рђљрђ«рђИрђћрђ▓рђирђђрђљрђ▒рђгрђи", "рђЋрђ╝рђ▒рђгрђЂрђ╗рђёрђ║рђљрђгрђљрђйрђ▒рђЋрђ╝рђ▒рђгрђЋрђ«рђљрђЁрђ║рђђрђГрђ»рђџрђ║рђљрђ▒рђгрђёрђ║рђюрђйрђљрђ║рђЋрђ╗рђ▒рђгрђ║рђћрђ▒рђљрђгрђюрђгрђИрђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђюрђ▒рђИ", "рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђЎрђёрђ║рђИрђђрђГрђ»рђђрђ╗рђЋрђ║рђЎрђЋрђ╝рђірђирђ║рђўрђ░рђИрђюрђГрђ»рђирђЋрђ╝рђ▒рђгрђЏрђёрђ║рђЏрђёрђ║рђђрђйрђ▓рђЎрђюрђгрђИ", "рђЎрђёрђ║рђИрђћрђгрђЎрђірђ║рђђрђЎрђАрђ▒рђИрђюрђГрђ»рђИрђЋрђ▒рђФрђи", "рђЎрђёрђ║рђИрђђрђўрђгрђюрђГрђ»рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђќрђ╝рђЁрђ║рђћрђ▒рђЏрђљрђг", "рђџрђ╗рђ▒рђгрђёрђирђ║рђќрђгрђърђірђ║рђЎрђърђгрђИрђЎрђёрђ║рђИрђђрђГрђ»рђёрђФрђЎрђ▒рђИрђћрђ▒рђљрђџрђ║", "рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђўрђџрђ║рђЋрђ╝рђ▒рђИрђЎрђЙрђгрђЋрђ╝рђћрђ║рђюрђгрђђрђГрђ»рђђрђ║", "рђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђљрђ▒рђгрђърђ«рђИрђЋрђ╗рђ▒рђгрђирђЂрђ╗рђђрђ║рђђрђљрђ▒рђгрђирђѓрђйрђ▒рђИрђърђ«рђИрђюрђгрђЋрђ▓", "рђАрђгрђърђ«рђИрђџрђ▒рђгрђёрђ║рђљрђгрђюрђ╗рђЙрђ▒рђгрђирђюрђГрђ»рђђрђ║рђљрђ▒рђгрђърђгрђИрђюрђ▒­ЪЉЇ­Ъце­Ъце", "Hiрђќрђгрђърђірђ║рђЎрђърђгрђИ", "рђЁрђгрђЏрђГрђ»рђђрђ║рђЋрђФрђАрђ»рђћрђ║рђИрђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђАрђћрђ░рђюрђђрђ║рђћрђ▓рђирђђрђ»рђюрђгрђИрђЏрђ▒", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђАрђЂрђ»рђЎрђўрђгрђђрђГрђ»рђђрђ░рђЋрђФрђђрђџрђ║рђЋрђФрђюрђ▓­Ъў│", "рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђЏрђГрђ»рђђрђ║рђЉрђгрђИрђюрђ▒рђИрђЁрђ▒рђгрђђрђ║рђЏрђ░рђИ", "рђЎрђАрђ▒рђИрђюрђГрђ»рђИрђЂрђйрђ▒рђИрђърђгрђИрђћрђгрђИрђЏрђёрђ║рђёрђФрђирђљрђЋрђірђирђ║", "рђёрђФрђирђАрђЎрђГрђћрђирђ║рђЎрђЏрђЋрђ▓рђўрђгрђђрђГрђ»рђћрђгрђИрђЂрђ╗рђёрђ║рђљрђгрђюрђ▓рђЂрђйрђ▒рђИрђЎрђърђгрђИрђЎрђ╗рђГрђ»рђИ", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђќрђ«рђєрђћрђ║рђљрђгрђюрђгрђИрђђрђй­Ъўе", "рђЎрђђрђГрђ»рђђрђ║рђћрђГрђ»рђёрђ║рђљрђ▒рђгрђирђўрђ░рђИрђюрђгрђИрђЂрђйрђ▒рђИрђЎрђърђгрђИ­ЪўЈ", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђЎрђёрђ║рђИрђірђ▒рђгрђёрђ║рђИрђћрђ▒рђЋрђ«рђюрђгрђИ", "рђЎрђёрђ║рђИрђюрђђрђ║рђљрђйрђ▒рђђрђАрђюрђ»рђЋрђ║рђђрђ╝рђЎрђ║рђИрђюрђ»рђЋрђ║рђљрђ▓рђирђюрђђрђ║рђЋрђ▓рђўрђгрђђрђГрђ»рђірђ▒рђгрђёрђ║рђИрђЂрђ╗рђёрђ║рђџрђ▒рђгрђёрђ║рђєрђ▒рђгрђёрђ║рђљрђгрђюрђ▓", "рђЪрђћрђ║рђЋрђ▓рђЏрђЙрђГрђљрђџрђ║РђїрђЎрђгрђћрђ║рђЎрђЏрђЙрђГрђўрђ░рђИрђЎрђёрђ║рђИрђюрђГрђ»рђЂрђйрђ▒рђИрђђ­ЪўЏ", "рђўрђгрђєрђёрђ║рђЂрђ╝рђ▒рђљрђйрђ▒рђюрђгрђЋрђ▒рђИрђћрђ▒рђљрђгрђЎрђърђћрђгрђИрђўрђ░рђИрђёрђФрђђ", "рђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђђрђ╝рђ▒рђгрђёрђ║рђљрђ▒рђгрђёрђ║рђљрђ▒рђгрђёрђ║рђћрђ▓рђирђЏрђ░рђИрђћрђ▒рђљрђгрђюрђгрђИ", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђђрђГрђ»рђђрђ║рђюрђ▒рђЎрђёрђ║рђИрђАрђЎрђ▒рђЁрђ▒рђгрђђрђ║рђЋрђљрђ║рђЎрђюрђГрђ»рђирђћрђгрђИрђљрђгрђюрђгрђИрђЎрђёрђ║рђИрђђ", "рђђрђГрђ»рђЎрђ▒рђђрђГрђ»рђюрђГрђ»рђИрђљрђ▓рђирђЁрђ▒рђгрђђрђ║рђЋрђ╗рђ▒рђгрђирђюрђ░рђюрђгрђИрђЂрђйрђ▒рђИрђюрђгрђИрђЎрђёрђ║рђИрђђрђЎрђърђ▓рђђрђйрђ▓рђљрђ▒рђгрђирђўрђ░рђИ", "рђЎрђёрђ║рђИрђЎрђГрђўрђёрђФрђюрђГрђ»рђИрђёрђФрђюрђГрђ»рђИрђЎрђйрђ▒рђИрђЉрђгрђИрђљрђ▓рђирђърђгрђИрђЋрђ▓рђЎрђёрђ║рђИрђђ", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђёрђФрђюрђГрђ»рђИрђюрђГрђ»рђђрђ║рђюрђГрђ»рђирђЎрђёрђ║рђИрђђрђёрђФрђирђърђгрђИрђќрђ╝рђЁрђ║рђђрђ▒рђгрђюрђгрђИрђљрђ▒рђгрђърђ«рђИ­ЪцЉ", "рђљрђ▒рђгрђърђ«рђИрђЎрђћрђгрђИрђћрђ▓рђирђюрђ▒рђђрђГрђ»рђђрђ║рђАрђйрђЎрђ║рђИ", "рђЋрђ╗рђ▒рђгрђирђюрђГрђ»рђђрђ║рђљрђгрђђрђйрђгрђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђњрђ░рђњрђ░рђњрђћрђ║рђњрђћрђ║рђђрђ▒рђгрђёрђ║", "рђърђГрђЋрђФрђЋрђ╝рђ«рђърђГрђЋрђФрђЋрђ╝рђ«рђЎрђёрђ║рђИрђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђєрђГрђ»рђљрђг", "рђЪрђ▒рђирђЏрђ▒рђгрђёрђ║рђќрђгрђърђірђ║рђЎрђърђгрђИрђюрђ▒рђИрђАрђЂрђ»рђЎрђЙрђђрђ░рђЋрђФрђђрђџрђ║рђЋрђФрђњрђ░рђЋрђФрђњрђћрђ║рђЋрђФрђюрђ»рђЋрђ║рђћрђ▒рђљрђгрђюрђгрђИрђЎрђ╗рђђрђ║рђћрђЙрђгрђюрђГрђ»рђЎрђ╗рђђрђ║рђћрђЙрђгрђЏрђёрђФрђирђўрђ▒рђгрђАрђљрђёрђ║рђИрђђрђЋрђ║рђЎрђЋрђ╝рђ«рђИрђЎрђЙрђАрђЂрђ»рђўрђгрђЋрђ╝рђћрђ║рђђрђГрђ»рђђрђ║рђЂрђ╗рђёрђ║рђћрђ▒рђљрђгрђюрђірђ║рђИрђЪрђ▒рђирђЏрђ▒рђгрђёрђ║рђЂрђйрђ▒рђИрђърђ░рђљрђ▒рђгрђёрђ║рђИрђЁрђгрђИ", "рђЏрђ»рђЋрђ║рђєрђГрђ»рђИрђЎрђърђгрђИрђърђ▒рђЂрђ╗рђёрђ║рђюрђГрђ»рђирђюрђгрђИ", "рђєрђЏрђгрђърђЂрђёрђ║рђЋрђ╝рђърђгрђћрђгрђђрђГрђ»рђАрђ▓рђирђюрђГрђ»рђђрђЋрђ║рђљрђГрђ»рђИрђюрђ▒рђИрђўрђ▒рђгрђЎрђЏрђ»рђХрђћрђ▓рђирђљрђ▒рђгрђирђЎрђЏрђўрђ░рђИ", "рђЎрђёрђ║рђИрђђрђюрђ░рђљрђђрђгрђўрђ▒рђгрђЎрђюрђгрђИрђўрђгрђюрђГрђ»рђирђЏрђ▒рђгрђљрђгрђюрђ▓", "рђюрђйрђџрђ║рђюрђГрђ»рђђрђ║рђљрђгрђђрђйрђгрђАрђћрђГрђ»рђёрђ║рђџрђ░рђЎрђГрђЋрђ╝рђћрђ║рђЋрђ«­ЪўЈ", "рђАрђ▓рђирђюрђ▒рђгрђђрђ║рђЄрђћрђ▓рђирђЎрђћрђГрђ»рђёрђ║рђърђ▒рђИрђўрђ░рђИрђЎрђёрђ║рђИрђёрђФрђирђђрђГрђ»", "рђђрђ╝рђГрђ»рђИрђЁрђгрђИрђАрђ»рђћрђ║рђИрђърђгрђИрђќрђ▒рђгрђђрђ║рђюрђГрђ»рђърђ▒рђИрђљрђџрђ║", "рђџрђ╗рђ▒рђгрђёрђирђ║рђАрђђрђГрђ»рђђрђ║рђірђХрђирђљрђ▓рђирђЂрђйрђ▒рђИрђўрђџрђ║рђћрђ▒рђЏрђгрђЮрђёрђ║рђЋрђ»рђћрђ║рђИрђЋрђ╝рђћрђ║рђЋрђ«рђюрђ▓", "рђђрђГрђ»рђЎрђ▒рђђрђГрђ»рђюрђГрђ»рђИрђЎрђђрђГрђ»рђђрђ║рђћрђГрђ»рђёрђ║рђљрђ▒рђгрђирђўрђ░рђИрђюрђгрђИ", "рђЎрђёрђ║рђИрђюрђ▒рђгрђђрђ║рђЋрђ╗рђ▒рђгрђирђљрђгрђЎрђёрђ║рђИрђЋрђ▓рђЏрђЙрђГрђљрђџрђ║рђќрђгрђърђірђ║рђЎрђърђгрђИ", "рђАрђ»рђћрђ║рђИрђЎрђЁрђгрђИрђћрђ▓рђирђљрђ▒рђгрђърђ«рђИрђЏрђ»рђћрђ║рђИрђЎрђЙрђгрђърђгрђєрђђрђ║рђЏрђ»рђћрђ║рђИ", "рђђрђ╝рђ▒рђгрђђрђ║рђћрђ▒рђљрђгрђюрђгрђИрђЎрђёрђ║рђИрђђ", "рђўрђгрђюрђГрђ»рђирђђрђ╝рђ▒рђгрђђрђ║рђЋрђ╝рђћрђ▒рђљрђгрђюрђ▓рђЂрђйрђ▒рђИрђюрђ▒рђИ", "рђЎрђ╗рђђрђ║рђћрђЙрђгрђёрђџрђ║рђюрђ▒рђИрђћрђ▓рђирђАрђърђћрђгрђИрђЂрђХрђљрђ▒рђгрђирђЎрђгрђюрђгрђИ", "рђЮрђ▒рђИрђЮрђ▒рђИрђђрђђрђГрђ»рђђрђ║рђќрђгрђърђірђ║рђЎрђърђгрђИрђЎрђёрђ║рђИрђЁрђ«рђђрђАрђћрђХрђЎрђђрђ▒рђгрђёрђ║рђИрђўрђ░рђИ", "рђЂрђйрђ▒рђИрђћрђХрђЉрђйрђђрђ║рђћрђ▒рђљрђџрђ║рђЂрђйрђ▒рђИрђЎрђърђгрђИрђЎрђёрђ║рђИрђђ", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђўрђџрђ║рђђрђГрђ»рђЋрђ╝рђ▒рђИрђЎрђг", "рђљрђ▒рђгрђърђгрђИрђђрђГрђ»рђђрђ║рђЋрђФрђАрђ»рђћрђ║рђИрђАрђџрђгрђИрђЎрђЋрђ╝рђ▒рђќрђ╝рђЁрђ║рђћрђ▒рђљрђџрђ║", "рђђрђГрђ»рђЎрђ▒рђђрђГрђ»рђюрђГрђ»рђИрђЏрђ▒рђЎрђёрђ║рђИрђЏрђ»рђћрђ║рђИрђђрђћрђ║рђћрђ▒рђЏрђЋрђ«рђюрђгрђИрђЪ", "рђЎрђёрђ║рђИрђЎрђ▒рђЁрђЋрђљрђйрђ▒рђЮрђёрђ║рђЋрђ╝рђ▒рђгрђћрђ▒рђљрђгрђюрђгрђИрђќрђгрђърђірђ║рђЎрђърђгрђИ", "рђАрђ▒рђИрђАрђ▓рђирђљрђ▒рђгрђирђЎрђёрђ║рђИрђђрђђрђГрђ»рђЎрђ▒рђђрђГрђ»рђюрђГрђ»рђИрђЋрђ▒рђФрђирђЪрђ»рђљрђ║рђюрђгрђИ", "рђАрђЏрђЙрђ»рђХрђИрђърђЎрђгрђИрђєрђЏрђгрђЋрђ╝рђърђгрђћрђгрђђрђГрђ»рђАрђЏрђЙрђ»рђХрђИрђЋрђ▒рђИрђЋрђ«рђЋрђ▒рђФрђи", "рђёрђФрђюрђГрђ»рђИрђЎрђљрђ▒рђгрђърђ«рђИрђЏрђЙрђ»рђХрђИрђћрђ▒рђљрђ▒рђгрђирђЎрђ╗рђђрђ║рђћрђЙрђгрђђрђљрђЁрђ║рђЎрђ╗рђГрђ»рђИ", "рђєрђЏрђгProblemрђАрђЏрђЙрђГрђћрђ║рђАрђЮрђФрђђрђљрђ▒рђгрђ║рђЏрђ»рђХрђЎрђ╗рђђрђ║рђюрђ»рђХрђИрђћрђ▓рђирђђрђ╝рђірђирђ║рђЎрђЏрђўрђ░рђИрђірђ«", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рђЋрђ╝рђћрђ║рђюрђГрђ»рђИрђљрђ▓рђирђђрђГрђ»рђЎрђ▒рђђрђГрђ»  рђюрђГрђ»рђИрђърђгрђИрђЋрђ▒рђФрђирђЎрђёрђ║рђИрђђ­Ъў│", "рђљрђђрђџрђирђ║рђђрђ▒рђгрђёрђ║ рђђрђГрђ»рђџрђирђ║рђАрђЎрђ▒рђђрђГрђ»рђърђ░рђЎрђ╗рђгрђИрђюрђГрђ»рђИрђЂрђГрђ»рђёрђ║рђИрђЏрђљрђџрђ║рђюрђГрђ»рђи", "Sorry рђЋрђ▓рђџрђќрђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рђёрђФрђюрђђрђ║рђюрђйрђћрђ║рђАрђюрђГрђ»рђИрђюрђйрђћрђ║рђЋрђ╝рђ«рђЎрђёрђ║рђИрђАрђЎрђ▒рђЏрђЙрђ▒рђгрђЋрђ«", "рђЎрђёрђ║рђИрђЋрђФрђИрђЁрђЋрђ║рђђрђГрђ»рђќрђ╝рђ▓рђЋрђ╝рђ«рђИ рђћрђХрђЪрђ▒рђгрђёрђ║рђћрђ▒рђљрђџрђ║ рђАрђгрђЋрђ»рђљрђ║рђЁрђ▒рђгрђ║ рђЋрђФрђИрђЁрђЋрђ║рђђрђГрђ» рђЋрђГрђљрђ║рђЉрђгрђИрђюрђГрђ»рђђрђ║", "рђЁрђЁрђ║рђўрђ▒рђИрђЏрђЙрђ▒рђгрђёрђ║рђєрђГрђ»рђЋрђ╝рђ«рђИ рђЏрђЋрђ║рђђрђйрђЋрђ║рђЉрђ▓рђЎрђЙрђг рђЋрђГрђ»рђђрђ║рђєрђХрђюрђГрђ»рђђрђ║рђљрђ▒рђгрђёрђ║рђИрђћрђ▒рђљрђџрђ║ рђЎрђърђгрђђрђ▒рђгрђёрђ║", "рђўрђ▒рђгрђЎ", "рђЎрђАрђ▒рђюрђГрђ»рђИрђюрђ▒рђИрђЎрђёрђ║рђИрђЎрђ▒рђќрђгрђърђірђ║рђЎрђєрђГрђ»рђљрђгрђюрђђрђ║рђЂрђХрђюрђгрђИ", "рђЪрђ»рђљрђ║рђЋрђФрђЋрђ╝рђ«рђЪрђ»рђљрђ║рђЋрђФрђЋрђ╝рђ«рђЎрђёрђ║рђИрђЎрђ▒рђќрђгрђърђірђ║рђЎрђћрђгрђЏрђ▒рђИрђюрђ░рђЁрђірђ║рђЏрђ▓рђирђюрђгрђИ", "рђєрђёрђ║рђИрђЏрђ▓рђърђгрђИрђЎрђёрђ║рђИрђАрђЎрђ▒рђЉрђЎрђёрђ║рђИрђЎрђЂрђ╗рђђрђ║рђђрђ╗рђйрђ▒рђИрђћрђГрђ»рђёрђ║рђќрђ░рђИрђюрђгрђИ", "рђАрђЏрђЙрђ»рђХрђИрђърђЎрђгрђИрђўрђгрђюрђГрђ»рђирђЏрђЙрђ»рђХрђИРђїрђЎрђ▓рђЎрђ▓рђћрђ▒рђљрђгрђюрђірђ║рђИ", "рђёрђФрђюрђГрђ░рђИрђЎрђърђгрђИрЂђрђђрђ║рђёрђ╝рђГрђЎрђ║рђђрђ»рђљрђ║рђћрђ▒рђюрђЙрђЂрђ╗рђЅрђ║рђюрђгрђИ", "рђЎрђћрђГрђ»рђёрђ║рђЏрђёрђ║рђљрђ▒рђгрђи left the group рђърђгрђюрђ»рђЋрђ║рђюрђГрђ»рђђрђ║рђљрђ▒рђгрђирђірђ«рђЏрђ▒", "рђЪрђгрђЎрђёрђ║рђИрђАрђЎрђ▒рђърђ▒рђљрђгрђљрђђрђџрђ║рђќрђ╝рђЁрђ║рђћрђГрђ»рђёрђ║рђюрђГрђ»рђирђюрђгрђИ", "рђўрђгрђюрђГрђ»рђирђЎрђёрђ║рђИрђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђђрђГрђ»рђЂрђХрђЋрђ╝рђ▒рђгрђћрђ▒рђЏрђљрђгрђюрђірђ║рђИ", "рђћрђгрђИрђЎрђюрђірђ║рђўрђ░рђИрђЎрђёрђ║рђИрђАрђЎрђ▒рђърђ▒рђљрђ▓рђирђАрђђрђ╝рђ▒рђгрђёрђ║рђИрђљрђйрђ▒", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђърђ▒рђљрђ▓рђирђАрђђрђ╝рђ▒рђгрђёрђ║рђИрђљрђйрђ▒рђђрђГрђ»рђАрђђрђ╝рђ▒рђгрђёрђ║рђИрђЁрђ»рђХрђЏрђЙрђёрђ║рђИрђЋрђ╝рђЋрђ▒рђИрђЋрђФ", "рђАрђЎрђЙрђћрђ║рђљрђЏрђгрђИрђЏрђ▓рђирђўрђђрђ║рђљрђ▒рђгрђ║рђърђгрђИрђєрђГрђ»рђЏрђёрђ║рђЎрђёрђ║рђИрђАрђЎрђ▒рђёрђФрђАрђЎрђЙрђћрђ║рђљрђђрђџрђ║рђюрђГрђ»рђИрђљрђгрЂђрђћрђ║рђЂрђХрђЋрђФ", "рђЎрђёрђ║рђИрђЁрђ▒рђгрђђрђ║рђЂрђйрђђрђ║рђўрђгрђюрђГрђ»рђирђЎрђ▓рђћрђ▒рђљрђг", "рђёрђФрђюрђГрђ»рђИрђЎрђЁрђ▒рђгрђђрђ║рђЋрђ▒рђФрђђрђ╝рђ«рђИрђљрђЁрђ║рђџрђ▒рђгрђђрђ║рђЉрђ▓рђўрђгрђљрђ▒рђЋрђ╝рђ▒рђг", "рђђрђ▒рђгрђёрђ║рђИрђЋрђФрђЋрђ╝рђ«рђЎрђёрђ║рђИрђАрђЎрђ▒рђърђ▒рђЋрђ╝рђ«", "рђёрђФрђЁрђГрђљрђ║рђірђЁрђ║рђћрђ▒рђљрђџрђ║рђЎрђёрђ║рђИрђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђюрђ«рђИрђЁрђ»рђЋрђ║рђЎрђђрђ╗рђйрђЎрђ║рђИрђюрђГрђ»рђи", "рђєрђђрђ║рђђрђГрђ»рђђрђ║рђЋрђ▒рђИрђЋрђФрђўрђ▒рђгрђЎрђЏрђ▒", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђАрђърђ»рђўрђАрђєрђёрђ║рђЋрђ╝рђ▒рђЏрђ▓рђирђюрђгрђИ", "рђёрђФрђюрђГрђ»рђИрђЎрђюрђ░рђЎрђ▓", "рђЪрђ▒рђИрђАрђЏрђЙрђ»рђХрђИрђърђЎрђгрђИрђюрђђрђ║рђЋрђћрђ║рђИрђђрђ╗рђћрђ▒рђљрђгрђюрђгрђИ", "рђЎрђърђГрђЂрђ╗рђёрђ║рђўрђ░рђИрђЎрђёрђ║рђИрђАрђЎрђ▒рђќрђгрђърђірђ║рђЎрђђрђГрђ» рђЎрђёрђ║рђИрђЅрђ«рђИрђюрђ▒рђИрђюрђГрђ»рђИрђћрђ▒рђЋрђ╝рђ«", "рђЎрђърђГрђЂрђ╗рђёрђ║рђўрђ░рђИрђђрђйрђгрђђрђГрђ»рђЎрђ▒рђђрђГрђ»рђюрђГрђ»рђИрђюрђГрђ»рђђрђ║", "рђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђўрђгрђљрђ▒рђЋрђ╝рђ▒рђг", "рђюрђ«рђИрђЋрђ▓рђєрђ▓рђћрђ▒рђљрђгрђљрђ▒рђгрђёрђ║рђАрђЊрђГрђЋрђ╣рђЋрђгрђџрђ║рђЏрђЙрђГрђЏрђЙрђГрђєрђ▓рђљрђ▓рђирђёрђФрђирђђрђГрђ»рђАрђгрђИрђђрђ╗рђЁрђЎрђ║рђИрђЋрђФрђЪ", "рђюрђ░рђљрђђрђгрђИрђюрђГрђ»рђИрђЂрђХрђЏрђљрђ▓рђирђАрђЎрђ▒рђђрђћрђ▒рђЎрђйрђ▒рђИрђюрђгрђљрђ▓рђирђърђгрђИ", "рђђрђ╝рђйрђђрђ║рђЎрђърђгрђИ", "рђЪрђГрђљрђ║рђђрђ▒рђгрђёрђ║", "рђърђ▒рђЎрђџрђ║рђћрђ▒рђгрђ║", "рђёрђФрђюрђГрђ»рђИрђЎрЂђрђђрђ║", "рђюрђђрђ║рђљрђйрђ▒рђљрђ»рђћрђ║рђћрђ▒рђЋрђ╝рђ«рђИрђЁрђгрђљрђйрђ▒рђљрђ▒рђгрђёрђ║рђЎрђЎрђЙрђћрђ║рђљрђ▒рђгрђирђЋрђФрђюрђгрђИрђЪ", "рђљрђ»рђћрђ║рђЏрђЎрђџрђ║рђюрђ▒ рђЎрђёрђ║рђИрђЏрђёрђ║рђєрђГрђ»рђёрђ║рђћрђ▒рђЏрђљрђ▓рђирђюрђ░рђђ Problem  рђюрђ▒рђірђ«", "рђЎрђћрђ▒рђирђљрђћрђ▒рђирђђрђЎрђЙрђєрђГрђ»рђЏрђЙрђџрђ║рђЉрђ▓рђЮрђёрђ║рђюрђгрђЋрђ╝рђ«рђИрђАрђЏрђЙрђёрђ║рђўрђ»рђЏрђёрђ║рђђрђГрђ»рђЋрђ»рђћрђ║рђђрђћрђ║рђљрђгрђърђ▒рђњрђЈрђ║рђћрђ▒рђгрђ║рђЂрђйрђ▒рђИрђЏ", "рђЏрђ»рђђрђ╣рђЂрђєрђГрђ»рђИрђюрђГрђ»рђИрђЎрђърђгрђИ", "рђёрђФрђюрђГрђ»рђИ рђёрђФрђирђюрђ▒рђгрђђрђ║рђАрђЉрђгрђЎрђђрђ╗рђюрђГрђ»рђирђЂрђГрђ»рђИрђёрђГрђ»рђћрђ▒рђљрђгрђюрђгрђИ", "рђљрђђрђџрђирђ║рђђрђ▒рђгрђёрђ║ рђЁрђ▒рђгрђђрђ║рђЏрђ»рђЋрђ║рђєрђГрђ»рђИ", "рђЁрђ▒рђгрђђрђ║рђАрђЉрђгрђђрђ╗рђћрђірђ║рђИрђърђёрђ║рђЋрђ▒рђИрђЎрђџрђ║рђќрђ▒рђќрђ▒рђЂрђ▒рђФрђ║", "рђюрђ«рђИрђдрђИрђћрђЙрђ▒рђгрђђрђ║рђћрђ▓рђирђЂрђйрђ▒рђИрђЎрђђ рђюрђгрђџрђЙрђЦрђ║рђћрђ▒рђљрђг", "рђѓрђ╗рђЋрђГрђ»рђИрђюрђГрђ»рђИрђЎрђърђгрђИ", "рђАрђГрђЎрђ║Рђїрђ▒рђЎрђ╝рђгрђёрђ║рђюрђГрђ»рђИрђЎрђърђгрђИ", "рђђрђ╝рђйрђђрђ║рђюрђГрђ»рђИрђЎрђърђгрђИ", "рђњрђГрђ»рђёрђ║рђєрђГрђ»рђєрђ▒рђгрђюрђГрђ»рђИрђЎрђърђгрђИ", "рђЂрђйрђ▒рђИрђЎрђ╗рђГрђ»рђИрђљрђ»рђХрђИрђЂрђ╝рђёрђ║рђћрђ▒рђљрђгрђЂрђйрђ▒рђИрђЎрђђ", "рђЎрђАрђ▒рђюрђГрђ»рђИрђћрђгрђЄрђ«рђЎрђърђгрђИ", "рђџрђ▒рђЏрђЙрђ░рђђрђГрђ»рђИрђђрђйрђџрђ║рђљрђ▓рђирђђрђ»рђюрђгрђИрђЪрђюрђ«рђИрђўрђ▓", "рђўрђ»рђЏрђгрђИрђърђЂрђёрђ║рђюрђ«рђИрђђрђ╗рђйрђ▒рђИрђЋрђФрђЁрђ▒", "рђЎрђёрђ║рђИрђђрђГрђ»рђђрђ▒рђгрђёрђ║рђИрђЂрђ╗рђ«рђИрђЋрђ▒рђИрђЋрђ╝рђ«рђИрђќрђёрђ║рђюрђГрђ»рђИрђЎрђЙрђгрђюрђ▒рђЁрђ▒рђгрђђрђ║рђђрђ»рђюрђгрђИ", "рђЪрђГрђљрђ║рЂђрђђрђ║ рђћрђљрђ║рђЋрђ╝рђірђ║рђљрђгрЂђрђљрђГрђХрђърђгрђђ рђАрђЏрђЙрђёрђ║рђўрђ»рђЏрђёрђ║рђђрђ╝рђйрђюрђгрђЋрђ╝рђ«рђќрђёрђ║рђюрђГрђ»рђИрђљрђ▒рђгрђирђЎрђџрђ║рђЪрђЎрђёрђ║рђИрђђрђГрђ»", "рђёрђФрђюрђГрђ»рђИрђИрђЎрђђрђ»рђюрђгрђИрђЁрђгрђЉрђЋрђ║рђЋрђГрђ»рђирђЏрђёрђ║рђАрђЂрђГрђ»рђёрђ║рђИрђЁрђ▒", "рђёрђФрђюрђГрђ»рђИрђЎрђђрђ»рђюрђгрђИрђђрђАрђЂрђГрђ»рђёрђ║рђИрђЁрђ▒рђюрђГрђ»рђирЂђрђћрђ║рђЂрђХрђљрђгрђЪрђёрђГрђёрђГ", "рЂђрђђрђ║рђЎрђърђгрђИрђљрђ▒рђгрђёрђ║рђИрђЋрђћрђ║рђюрђ▒рђюрђ«рђИрђђрђ╝рђірђирђ║рђћрђ▒рђљрђгрђюрђгрђИ", "рђёрђФрђюрђГрђ»рђИрђЎрђЂрђйрђ▒рђИрђєрђ▓рђЏрђёрђ║рђёрђ╝рђГрђЎрђ║рђЂрђХрђЂрђ»рђћрђ║рђЎрђђрђГрђ»рђђрђ║рђћрђ▓рђи", "рђќрђёрђ║рђюрђГрђ»рђИрђЁрђЂрђћрђ║рђИрђђрђЋрђФ рђірђ«рђЏрђ▒рђќрђёрђ║рђюрђГрђ»рђИрђЋрђФрђЏрђЁрђ▒", "рђќрђёрђ║рђюрђГрђ»рђИрђЂрђйрђёрђирђ║рђЋрђ╝рђ»рђЋрђФ", "рђЎрђАрђ▒рђюрђГрђ»рђИрђђрђюрђ▓рђћрђ▓рђћрђ▓рђЋрђ▓рђЁрђЏрђърђ▒рђИрђљрђџрђ║рђюрђ▒рђгрђёрђ║рђћрђ▒рђўрђ«", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђАрђГрђЎрђ║рђюрђйрђЙрђљрђ║рђюрђГрђ»рђђрђ║рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђЎрђёрђ║рђИрђАрђЎрђ▒рђёрђФрђирђюрђГрђёрђ║рђљрђХрђђрђ╝рђ«рђИрђђрђГрђ»рђђрђ╝рђГрђ»рђђрђ║рђћрђ▒рђљрђгрђЎрђърђГрђўрђ░рђИрђюрђгрђИ", "рђюрђГрђЋрђ║рђЎрђърђгрђИрђюрђгрђИрђЪ", "рђюрђГрђЋрђ║рђћрђ▓рђирђљрђђрђ║рђюрђГрђ»рђИрђюрђГрђ»рђирђЉрђйрђђрђ║рђюрђгрђљрђ▓рђирђђрђ▒рђгрђёрђ║рђђрђ╝рђћрђ▒рђљрђгрђўрђ▓", "рђћрђЙрђ▒рђИрђђрђйрђ▒рђИрђћрђ▒рђљрђгрђЋрђ▓рђЁрђгрђљрђЁрђ║рђюрђ»рђХрђИрђћрђ▓рђирђљрђЁрђ║рђюрђ»рђХрђИрђђ", "рђЎрђАрђ▒рђюрђГрђ»рђИрђюрђ▒рђИрђЏрђџрђ║рђЎрђёрђ║рђИрђЁрђгрђљрђЁрђ║рђђрђ╝рђ▒рђгрђёрђ║рђИрђђрђёрђФрђирђЁрђгрђюрђ▒рђИрђђрђ╝рђ▒рђгрђёрђ║рђИрђюрђ▒рђгрђђрђ║рђЉрђйрђђрђ║рђљрђџрђ║рђЪ", "рђЂрђйрђ▒рђИрђЎрђърђгрђИрђђрђюрђ▓рђёрђГрђ»рђќрђ╝рђ▓рђќрђ╝рђ▓рђќрђ╝рђЁрђ║рђћрђ▒рђўрђ«рђЪ", "рЂђрђђрђ║рђЎрђюрђ▒рђИрђђрђ»рђюрђгрђИрђЎрђърђгрђИ", "рђЂрђйрђ▒рђИрђЎрђърђгрђИрђюрђГрђ»рђирђЋрђ╝рђ▒рђгрђЏрђёрђ║рђюрђ▓рђёрђФрђЂрђйрђ▒рђИрђЎрђърђгрђИрђєрђГрђ»рђЋрђ╝рђ«рђИрђѓрђ»рђЈрђ║рђџрђ░рђћрђ▒рђЎрђџрђирђ║рђђрђ▒рђгрђёрђ║рђЋрђ▓рђЪ", "рђЁрђгрђюрђ»рђХрђИрђЋрђ▒рђФрђёрђ║рђИрђърђљрђ║рђЋрђ»рђХрђљрђ▒рђгрђёрђ║рђЎрђЎрђЙрђћрђ║рђЋрђ▓рђЪрђ▒рђгрђёрђ║рђћрђ▒рђљрђгрђЪ", "рђЂрђйрђ▒рђИрђЎрђюрђ▒рђИрђЪрђ▒рђгрђёрђ║рђЋрђ╝", "рђърђ▒рђЎрђџрђ║рЂђрђђрђ║рђЎ рђЎрђёрђ║рђИрђАрђЎрђ▒рЂђрђђрђ║рђЎрђђрђГрђ»рђЁрђгрђИрђЋрђ╝", "рђЎрђАрђ▒рђюрђГрђ»рђИрђЏрђ»рђЋрђ║рђђ рђЋрђ▓рђЏрђ▒рђЋрђйрђђрђ╝рђ▒рђгрђ║рђЋрђ▓рђЁрђгрђИрђћрђ▒рђЏрђљрђ▓рђирђЁрђ▒рђгрђђрђ║рђЂрђйрђђрђ║", "рђђрђГрђ»рђђрђ╝рђ«рђИрђљрђГрђ»рђирђюрђГрђ» рђЂрђ╗рђГрђЁрђ║рђўрђгрђѓрђФ рђЎрђгрђюрђгрђЏрђЙрђЎрђ║рђИрђђрђ▒рђгрђљрђйрђ▒ рђЎрЂђрђџрђ║рђЁрђгрђИрђћрђГрђ»рђёрђ║рђљрђгрђєрђГрђ»", "рђђрђ╝рђђрђ║рђЦрђђрђ╝рђ▒рђгрђ║рђЋрђ▓рђћрђ▒рђирђљрђГрђ»рђёрђ║рђИрђЁрђгрђИрђћрђ▒рђЏрђљрђгрђєрђГрђ»рђєрђёрђ║рђИрђЏрђ▓рђърђгрђИ", "рђёрђФрђюрђГрђ»рђИрђЎрђђрђ»рђюрђгрђИрђЋрђ▓рђЪрђёрђ║рђИрђЋрђ▓рђЁрђгрђИрђЏрђљрђгрђєрђГрђ»", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђљрђірђюрђйрђљрђ║рђюрђГрђ»рђђрђ║рђюрђ▒ рђќрђ»рђћрђ║рђИрђЋрђ╝рђёрђ║рђЂрђЋрђ▒рђИрђЎрђџрђ║рђюрђ▒", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђЎрђёрђ║рђИрђќрђ»рђћрђ║рђИрђЎрђЙрђћрђ║рђђрђйрђ▓рђћрђ▒рђљрђгрђЎрђЋрђ╝рђёрђ║рђЋрђ▒рђИрђћрђГрђ»рђёрђ║рђљрђгрђєрђГрђ» рђЋрђГрђ»рђђрђ║рђєрђХрђЎрђЏрђЙрђГрђљрђгрђєрђГрђ»", "рђЎрђёрђ║рђИрђќрђ»рђћрђ║рђИрђЎрђЙрђћрђ║рђђрђйрђ▓рђћрђ▒рђљрђгрђЎрђюрђ▓рђћрђГрђ»рђёрђ║рђљрђгрђєрђГрђ»", "рђўрђџрђ║рђюрђГрђ»рђюрђ»рђЋрђ║рђЎрђюрђ▓рђЪ", "рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђюрђ▒рђИрђЎрђёрђ║рђИрђАрђєрђ▓рђЂрђХрђћрђ▒рђЏрђўрђ«рђЪ", "рђЎрђАрђ▒рђюрђГрђ»рђИрђЎрђёрђ║рђИрђђрђГрђ»рђєрђ▓рђљрђџрђ║ рђЎрђёрђ║рђИрђЎрђГрђўрђћрђЙрђЎрђёрђФрђљрђђрђ║рђюрђГрђ»рђИ", "рђЂрђ╗рђ▒рђЋрђћрђГрђ»рђёрђ║рђЁрђйрђЎрђ║рђИрђЎрђЏрђЙрђГрђюрђГрђ»рђирђєрђГрђ»рђірђ«рђђ", "рђЎрђАрђ▒рђюрђГрђ»рђИ рђюрђ«рђИрђќрђ»рђћрђ║рђИрђЁрђ▒рђгрђђрђ║рђЁрђ»рђљрђ║рђћрђ▓рђи", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђЌрђЁрђ║рђЂрђГрђ»рђИрђЋрђ╝рђ«рђИрђЏрђЙрђ»рђљрђгрђєрђГрђ»", "рђърђ▒рђЎрђџрђ║рђћрђ▒рђгрђ║рЂђрђђрђ║рђЎ", "рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИ рђЎрђёрђ║рђИрђЁрђгрђўрђгрђАрђЊрђГрђЋрђ╣рђЋрђгрђџрђ║рђЎрђЙрђђрђГрђ»рђЎрђЏрђЙрђГрђўрђ░рђИ рђЁрђ▒рђгрђђрђ║рђЋрђірђгрђЎрђ▓рђи", "рђёрђФрђюрђГрђ»рђИрђЎрђюрђГрђЋрђ║рђћрђЙрђ▒рђИрђђрђйрђ▒рђИрђћрђ▒рђљрђгрђЋрђ▓рђЁрђгрђљрђЁрђ║рђюрђ»рђХрђИрђћрђ▓рђирђљрђЁрђ║рђюрђ»рђХрђИрђєрђГрђ»", "рђђрђ╗рђйрђћрђ║ рђЎрђърђгрђИрђљрђйрђ▒ рђќрђ╗рђ▒рђгрђ║рђќрђ╝рђ▒рђЋрђ▒рђИрђЁрђЎрђ║рђИрђђрђйрђг", "рђёрђФрђюрђГрђ»рђИрђЎрђђрђ»рђюрђгрђИрђЎрђёрђ║рђИрђАрђЎрђ▒рђърђ▒рђўрђ«рђєрђГрђ»", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђЏрђђрђ║рђюрђірђ║рђћрђ▒рђирђђрђЎрђюрђгрђћрђГрђ»рђёрђ║рђљрђгрђєрђ▒рђгрђљрђ«рђИрђђрђйрђг", "рђЎрђёрђ║рђИрђАрђќрђ▒рђЉрђ▒рђгрђёрђ║рђђрђ╗рђћрђ▒рђљрђгрђюрђгрђИрђўрђгрђАрђЎрђЙрђ»рђћрђ▓рђирђюрђ▓рђЪ", "рђЎрђёрђ║рђИрђАрђќрђ▒ рђЂрђГрђ»рђИрђЎрђЙрђ»рђћрђ▓рђи рђЉрђ▒рђгрђёрђ║рђђрђ╗рђљрђгрђєрђГрђ»", "рђџрђ╗рђ▒рђгрђёрђирђ║ рђЎрђёрђ║рђИРђїрђЉрђ▒рђгрђёрђ║рђЉрђйрђђрђ║рђърђгрђИрђєрђГрђ»", "рђёрђФрђюрђГрђ»рђИрђЎрђЁрђ▒рђгрђђрђ║рђљрђ▒рђгрђърђгрђИ", "рђірђ«рђюрђГрђ»рђёрђ║рђИрђЎрђђрђ▒рђгрђёрђ║рђИрђўрђ░рђИрђюрђгрђИ рђўрђгрђюрђ▓ рђєрђёрђ║рђИрђЏрђ▓рђюрђГрђ»рђирђюрђгрђИ", "рђірђ«рђљрђГрђ»рђирђљрђ▒рђгрђўрђђрђ║рђЎрђЙрђг 4g internet рђЎрђЏрђўрђ░рђИрђюрђгрђИрђЪ", "рђёрђФрђюрђГрђ»рђИрђЎрђђрђ»рђюрђгрђИ рђўрђ▒рђЂрђ╗рђ▒рђърђ»рђХрђИрђћрђ▒рђЏрђљрђ▓рђирђАрђєрђёрђирђ║рђћрђ▓рђи", "рђЎрђЏрђЙрђђрђ║рђўрђ░рђИрђюрђгрђИрђЪ рђАрђЎрђ▒рђюрђЁрђ║рђЏрђёрђ║ рђЋрђГрђ»рђђрђ║рђєрђХрђЂрђГрђ»рђИрђљрђг", "рђљрђћрђ▒рђирђЎрђ»рђћрђирђ║рђќрђГрђ»рђИ500рђЋрђ▓рђЏрђљрђгрђєрђГрђ»рђірђ«рђђ", "рђЁрђгрђљрђйрђ▒рђЎрђЎрђЙрђћрђ║рђўрђ░рђИрђірђ« рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђ╗рђ▒рђгрђёрђ║рђИрђЎрђЉрђгрђИрђћрђГрђ»рђёрђ║рђўрђ░рђИрђюрђгрђИрђЪ", "рђёрђФрђюрђГрђ»рђИрђЎрђърђгрђИрђёрђФрђирђђрђ╝рђ▒рђгрђђрђ║рђюрђГрђ»рђирђюрђђрђ║рђљрђ»рђћрђ║рђЋрђ╝рђ«рђИрђЁрђгрђЎрђЙрђћрђ║рђўрђ░рђИрђєрђГрђ»", "рђірђ«рђЎрђёрђ║рђИрђЁрђгрђљрђйрђ▒рђЉрђЋрђ║рђћрђ▒рђљрђџрђ║рђўрђгрђюрђ▓рђђрђ╝рђ▒рђгрђђрђ║рђюрђГрђ»рђирђюрђгрђИ", "рђЁрђ▒рђгрђђрђ║рђЁрђ»рђћрђ║рђИрђюрђгрђИрђюрђ«рђИрђЁрђ»рђћрђ║рђИрђюрђгрђИрђюрђ«рђИрђЁрђ»рђЋрђ║рђЁрђ»рђћрђ║рђИрђюрђгрђИрђЪ", "рђёрђФрђюрђГрђ»рђИрђЎрђђрђ»рђюрђгрђИрђърђ▒рђЎрђџрђ║", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рђЎрђЙрђћрђ║рђИрђЋрђ╝рђ«рђИрђАрђгрђърђгрђќрђ╝рђ▒рђљрђгрђєрђГрђ»", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рђЎрђёрђ║рђИрђќрђ▒рђђрђюрђГрђёрђ║рђЎрђєрђђрђ║рђєрђХрђљрђ▒рђгрђирђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђърђ░рђЎрђ╗рђгрђИрђюрђГрђ»рђИрђЂрђГрђ»рђёрђ║рђИрђЏрђљрђгрђЪ", "рђЎрђёрђ║рђИрђђрђѓрђ▒рђИрђєрђГрђ»рђірђ«рђёрђФрђърђГрђљрђџрђ║рђћрђ▒рђгрђ║", "рђЎрђёрђ║рђИрђАрђќрђ▒рђђрђѓрђ▒рђИрђєрђГрђ»рђірђ«", "рђЎрђёрђ║рђИрђАРђїрђЎрђ▒рђёрђФрђљрђђрђ║рђюрђГрђ»рђИрђюрђГрђ»рђирђюрђ░рђќрђ╝рђЁрђ║рђюрђгрђљрђг рђЎрђАрђгрђћрђ▓рђирђЂрђйрђ▒рђИрђЎрђърђгрђИ", "рђЎрђ▒рђЎрђ▒рђирђърђгрђИрђюрђгрђИрђЪ рђЎрђёрђ║рђИрђђрђюрђ▓ рђёрђФрђєрђ▓рђюрђГрђ»рђирђёрђГрђ»рђџрђГрђ»рђЋрђ╝рђ«рђИрђърђйрђгрђИрђљрђГрђ»рђёрђ║рђЏрђљрђџрђ║рђљрђ▓рђи", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рђърђйрђгрђљрђГрђ»рђёрђ║рђћрђ▒рђљрђгрђюрђгрђИрђЪ", "рђљрђђрђџрђирђ║рђђрђ▒рђгрђёрђ║ рђђрђГрђ»рђџрђирђ║рђАрђЎрђ▒рђђрђГрђ»рђърђ░рђЎрђ╗рђгрђИрђюрђГрђ»рђИрђЂрђГрђ»рђёрђ║рђИрђЏрђљрђџрђ║рђюрђГрђ»рђи", "рђўрђгрђюрђ▓рђЎрђёрђ║рђИрђЁрђгрђЎрђЙрђћрђ║рђАрђ▒рђгрђёрђ║рђёрђФрђљрђђрђ║рђюрђГрђ»рђИрђЋрђ▒рђИрђЋрђ╝рђ«рђИрђЉрђйрђђрђ║рђюрђгрђЏрђёрђ║ рђЎрђЙрђћрђ║рђЎрђџрђ║рђЉрђёрђ║рђљрђџрђ║", "рђљрђ▒рђгрђ║рђЁрђЎрђ║рђИрђЂрђйрђ▒рђИрђЏрђг рђЂрђйрђ▒рђИрђЁрђђрђгрђИрђљрђйрђ▒рђЁрђ▒рђгрђђрђ║рђЏрђЎрђ║рђИрђЋрђ╝рђ▒рђгрђљрђџрђ║рђћрђ▒рђгрђ║", "рђќрђ╝рђірђирђ║рђљрђйрђ▒рђирђЏрђАрђ▒рђгрђёрђ║рђЎрђёрђ║рђИрђђ рђќрђ╝рђірђирђ║рђљрђйрђ▒рђИрђЋрђ▒рђИрђюрђГрђ»рђЏрђљрђ▓рђирђЁрђ▒рђгрђђрђ║рђєрђёрђирђ║рђЏрђЙрђГрђЏрђ▓рђирђюрђгрђИ", "рђЁрђгрђљрђйрђ▒рђђрђюрђ▓рђюрђГрђЋрђ║рђљрђђрђ║рђюрђГрђ»рђИрђюрђГрђ»рђирђЉрђйрђђрђ║рђюрђгрђљрђ▓рђирђђрђ▒рђгрђёрђ║рђђрђ╗рђћрђ▒рђљрђгрђЋрђ▓", "рђЎрђћрђгрђюрђГрђ»рђЎрђЙрђ»рђљрђйрђ▒рђЎрђ╗рђгрђИрђЋрђ╝рђ«рђИ рђЎрђёрђ║рђИрђёрђФрђЁрђюрђГрђ»рђирђђрђ╝рђГрђљрђ║рђЂрђГрђ»рђИрђюрђ▒рђгрђёрђ║рђћрђ▒рђљрђгрђєрђГрђ»", "рђўрђгрђюрђ▓рђёрђФрђирђєрђ▓рђљрђ▓рђирђЁрђгрђђрђГрђ»рђЎрђёрђ║рђИрђАрђЏрђЎрђ║рђИрђђрђ╝рђГрђ»рђђрђ║рђърђйрђгрђИрђљрђгрђюрђгрђИ", "рђЪрђГрђљрђ║рђЂрђйрђ▒рђИрђЎрђёрђ║рђИрђёрђФРђїрђєрђ▓рђърђюрђГрђ»рђЋрђ╝рђћрђ║рђєрђ▓рђљрђгрђюрђгрђИ", "рђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђюрђГрђ»рђирђЋрђ╝рђ▒рђгрђЏрђёрђ║рђЎрђёрђ║рђИрђђрђГрђ»рђџрђ║рђЎрђёрђ║рђИрђЁрђ▒рђгрђђрђ║рђЏрђ░рђИрђєрђГрђ»рђЋрђ╝рђ«рђИрђѓрђ»рђЈрђ║рђџрђ░рђћрђ▒рђАрђ»рђХрђИрђЎрђџрђ║", "рђЎрђёрђ║рђАрђЎрђ▒рђЌрђЁрђ║рђЏрђгрђюрђ▒рђИрђљрђйрђ▒рђЎрђ╝рђёрђ║рђЋрђ╝рђ«рђИрђюрђ«рђИрђљрђ▒рђгрђёрђ║рђљрђгрђєрђГрђ»", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђАрђгрђърђгрђќрђ╝рђ▒рђћрђ▒рђљрђгрђђрђГрђ»рђЎрђёрђ║рђИрђЂрђ╗рђ▒рђгрђёрђ║рђИрђђрђ╝рђірђирђ║рђЋрђ╝рђ«рђИрђЉрђ»рђћрђ▒рђљрђгрђєрђГрђ»рЂђрђђрђ║рђЏ", "рђірђірђЎрђёрђ║рђИрђАрђЎрђ▒рђЎрђЙрђћрђ║рђИрђЉрђ»рђљрђгрђєрђГрђ»рђірђ«", "рђёрђГрђ»рђЁрђЎрђ║рђИ", "рђЂрђ╗рђ▒рђЋрђћрђГрђ»рђёрђ║рђЁрђйрђЎрђ║рђИрђЎрђЏрђЙрђГ", "рђюрђГрђ»рђИрђљрђљрђ║рђљрђџрђ║рђЎрђёрђ║рђИрђАрђЎрђђрђГрђ»", "рђдрђИрђћрђЙрђ▒рђгрђђрђ║рђѓрђ»рђљрђ║рђђрђЋрђ║", "рђќрђгрђърђірђ║рђЎрђърђгрђИрђюрђ▒рђИрђюрђГрђ»рђИрђЂрђйрђ▓рђЋрђ▒рђИрђЎрђџрђ║рђЁрђгрђђрђГрђ»рђюрђ«рђИрђюрђ▒рђгрђђрђ║рђљрђљрђ║", "рђЎрђёрђ║рђИрђЎрђ▒рђюрђГрђ»рђИрђќрђгрђърђірђ║рђЎрђърђгрђИ рђўрђГрђљрђ║рђЎрђЏрђюрђГрђ»рђирђЂрђГрђ»рђИрђёрђГрђ»рђљрђгрђюрђгрђИрђЪ Typingрђђрђ╝рђљрђ▒рђгрђирђюрђ▓рђћрђЙрђ▒рђИрђђрђйрђ▒рђИрђќрђгрђЋрђГрђћрђ║рђИрђЎрђърђгрђИ рђёрђФрђћрђёрђ║рђИрђљрђгрђђ рђёрђФрђюрђГрђ»рђИрђЏрђёрђ║рђёрђ╝рђГрђЎрђ║рђћрђ▒", "Lord Problem рђюрђгрђЏрђёрђ║рђАрђђрђ»рђћрђ║рђЋрђ╝рђ▒рђИрђљрђгрђўрђ▓рђюрђгрђИ­ЪўЈ", "Lord Problem рђєрђГрђ»рђљрђг рђЎрђёрђ║рђИрђЏрђ▓рђи рђАрђГрђЎрђ║рђЎрђђрђ║рђєрђГрђ»рђИрђђрђ╝рђ«рђИрђЋрђ▒рђФрђи­Ъўѕ", "рђАрђЏрђЙрђёрђ║рђЋрђ╝рђърђгрђћрђгрђђрђГрђ» рђЋрђ╝рђърђгрђћрђгрђюрђгрђЏрђЙрђгрђЏрђёрђ║рђёрђЏрђ▓рђЋрђ╝рђірђ║рђђрђГрђ»рђЎрђ╗рђђрђ║рђЎрђ╝рђёрђ║рђљрђйрђ▒рђирђЏрђљрђ▒рђгрђирђЎрђЙрђгрђћрђ▓рђирђАрђљрђ░рђљрђ░рђўрђ▓рђћрђ▒рђгрђ║рђљрђЌрђ▓рђи", "рђАрђЏрђЙрђёрђ║рђЋрђ╝рђърђгрђћрђгрђєрђ▓рђЏрђёрђ║рђёрђ╝рђГрђЎрђ║рђЂрђХрђЂрђ»рђћрђ║рђЎрђђрђГрђ»рђђрђ║рђћрђ▓рђи", "рђАрђЏрђЙрђёрђ║рђЋрђ╝рђърђгрђћрђгрђєрђГрђ»рђљрђгрђЋрђ╝рђГрђ»рђёрђ║рђЁрђХрђЏрђЙрђгрђћрђљрђ║рђўрђ»рђЏрђгрђИрђюрђГрђ»рђирђљрђ▒рђгрђирђюрђ░рђАрђЎрђ╗рђгрђИрђђрђљрђёрђ║рђЁрђгрђИрђђрђ╝рђљрђџрђ║", "рђюрђђрђ║рђљрђйрђ▒рђљрђ»рђћрђ║рђћрђ▒рђЋрђ╝рђ«рђИрђЁрђгрђљрђйрђ▒рђљрђ▒рђгрђёрђ║рђЎрђЎрђЙрђћрђ║рђљрђ▒рђгрђирђЋрђФрђюрђгрђИрђЪ", "рђёрђФрђюрђГрђ»рђИрђЎрђЁрђ▒рђгрђђрђ║рЂђрђђрђ║рђЏрђ▒рђИрђЉрђгрђИ", "рђЎрђАрђ▒рђюрђГрђ»рђИрђЂрђйрђ▒рђИрђърђ░рђЂрђГрђ»рђИрђАрђ░рђЎрђ╝рђ░рђИрђћрђ▒рђљрђгрђюрђгрђИ", "рђЎрђёрђ║рђИрђАрђЎрђ▒рђђрђГрђ»рЂђрђђрђ║рђЏрђ░рђИрђђрђгрђђрђйрђџрђ║рђєрђ▒рђИрђЉрђГрђ»рђИрђЋрђ▒рђИрђќрђГрђ»рђирђћрђ▒рђирђЂрђёрђ║рђИ2:00рђєрђЏрђгрЂђрђћрђ║рђЂрђ╗рђГрђћрђ║рђИрђЉрђгрђИрђљрђџрђ║", "рђЪрђ╗рђ▒рђгрђёрђ║рЂђрђђрђ║рђђрђ╝рђ«рђИрђЏрђГрђ»рђђрђ║рђЉрђгрђИрђюрђ▒рђЎрђёрђ║рђИ", "рђёрђФрђюрђГрђ»рђИрђЎрЂђрђђрђ║рђЋрђ▒рђФрђЎрђЏрђГрђ»рђђрђ║рђћрђГрђ»рђёрђ║рђљрђ▒рђгрђирђўрђ░рђИрђюрђгрђИ", "рђђрђГрђ»рђЎрђ▒рђђрђГрђ»рђюрђГрђ»рђИрЂђрђђрђ║рђ║рђЎрђёрђ║рђИрђўрђгрђюрђГрђ»рђирЂђрђћрђ▒рђљрђгрђюрђірђ║рђИ" ]


# ===== Log Function =====
def save_log(user, user_id, name, group_id, content):
    """Save logs safely with auto-limit."""
    log_entry = {
        "user": user or "",
        "user_id": user_id or 0,
        "name": name or "Unknown",
        "group_id": group_id or "?",
        "content": content or ""
    }

    logs = []
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                logs = json.load(f)
                if not isinstance(logs, list):
                    logs = []
        except (json.JSONDecodeError, OSError):
            logs = []

    logs.append(log_entry)

    if len(logs) > MAX_LOGS:
        logs = logs[-MAX_LOGS:]

    try:
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
    except OSError as e:
        print(f"[ERROR] Failed to save log: {e}")

# ===== Owner/Admin Checks =====
def is_owner(user) -> bool:
    """Check if user_id is the owner"""
    return isinstance(user, int) and user == OWNER_ID

def is_admin_or_owner(user_id: int) -> bool:
    return user_id == OWNER_ID or user_id in ADMINS

print(is_admin_or_owner(7808603044))  # True рђќрђ╝рђЁрђ║рђърђёрђирђ║рђљрђџрђ║

def is_authorized(user_id: int) -> bool:
    """Single function to check owner/admin access"""
    return is_admin_or_owner(user_id)

DEFAULT_GROUPS = [
    
]

# ===== Group Management =====
def load_groups():
    try:
        with open(GROUP_FILE, "r", encoding="utf-8") as f:
            groups = json.load(f)
            groups = list(set(groups).union(DEFAULT_GROUPS))
            return groups
    except (FileNotFoundError, json.JSONDecodeError):
        return list(DEFAULT_GROUPS)

def save_groups(group_ids):
    all_groups = list(set(group_ids).union(DEFAULT_GROUPS))
    with open(GROUP_FILE, "w", encoding="utf-8") as f:
        json.dump(all_groups, f, indent=2, ensure_ascii=False)

def save_group_id(group_id):
    groups = load_groups()
    if group_id not in groups:
        groups.append(group_id)
        save_groups(groups)

def init_groups():
    save_groups(DEFAULT_GROUPS)
    print(f"РюЁ {len(DEFAULT_GROUPS)} default groups рђърђГрђЎрђ║рђИрђЋрђ╝рђ«рђИрђЋрђФрђЋрђ╝рђ«")

async def track_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type in ["group", "supergroup"]:
        save_group_id(chat.id)

def normalize_target(raw: str) -> int:
    # Username рђђрђГрђ» ID рђЋрђ╝рђ▒рђгрђёрђ║рђИрђљрђг, @ рђђрђГрђ» strip рђюрђ»рђЋрђ║рђљрђг рђЁрђљрђгрђљрђйрђ▒
    if raw.startswith("@"):
        raw = raw[1:]
    return int(raw)  # example only

# ===== Admin Management =====
def load_admins():
    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            admins = set(map(int, data.get("admins", [])))
            banned = set(map(int, data.get("banned_admins", [])))
            admins.update(DEFAULT_ADMINS)
            return admins, banned
    except (FileNotFoundError, json.JSONDecodeError):
        return set(DEFAULT_ADMINS), set()

def save_admins(admins, banned_admins):
    with open(ADMIN_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "admins": list(admins),
            "banned_admins": list(banned_admins)
        }, f, indent=2, ensure_ascii=False)

def refresh_admins():
    global ADMINS, BANNED_ADMINS
    ADMINS, BANNED_ADMINS = load_admins()

refresh_admins()

async def show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print("DEBUG show:", "user_id =", user_id, 
          "OWNER_ID =", OWNER_ID, 
          "ADMINS =", ADMINS, 
          "is_admin_or_owner =", is_admin_or_owner(user_id))

    if not is_admin_or_owner(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    commands = []
    for handler_group in context.application.handlers.values():
        for handler in handler_group:
            if isinstance(handler, CommandHandler):
                commands.extend(handler.commands)
    commands = sorted(set(commands))
    text = "рђўрђ▒рђгрђирђЉрђ▓рђЎрђЙрђгрђЏрђЙрђГрђљрђ▓рђи command рђЎрђ╗рђгрђИ -\n" + "\n".join(f"/{cmd}" for cmd in commands)
    await update.message.reply_text(text)

def escape_html(text: str) -> str:
    return html.escape(text)

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Set a nickname for a specific user_id"""
    user_id_who_sent = update.effective_user.id  # sender ID

    # РюЁ Owner/Admin check
    if not is_admin_or_owner(user_id_who_sent):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if len(context.args) < 2:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("РЮї user_id рђђ integer рђќрђ╝рђЁрђ║рђЏрђЎрђџрђ║")
        return

    nickname = " ".join(context.args[1:])
    nicknames[target_id] = nickname
    await update.message.reply_text(f"РюЁ {target_id} рђђрђГрђ» '{nickname}' рђюрђГрђ»рђирђърђГрђЎрђ║рђИрђЋрђ╝рђ«рђИрђЋрђФрђЋрђ╝рђ«")


# /Gplist Рєњ file рђЋрђГрђ»рђи
async def list_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Owner only - list all tracked groups"""
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђюрђ▒рђИ")
        return

    groups = load_groups()
    txt_file = "groups_list.txt"

    with open(txt_file, "w", encoding="utf-8") as f:
        f.write("­ЪЊї Group IDs List\n")
        f.write("======================\n\n")
        for gid in sorted(groups):
            f.write(f"{gid}\n")

    with open(txt_file, "rb") as f:
        await update.message.reply_document(f, caption="­ЪЊѓ Group IDs (Default + Tracked)")


async def add_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Owner only - add new auto-reply messages"""
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђюрђ▒рђИ")
        return

    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    new_msg = " ".join(context.args).strip()
    if not new_msg:
        await update.message.reply_text("рђЁрђгрђАрђђрђ╝рђ▒рђгрђёрђ║рђИрђАрђЏрђг рђАрђюрђйрђљрђ║рђЎрђќрђ╝рђЁрђ║рђЏрђЋрђФрЂІ")
        return

    global auto_replies
    auto_replies = [msg for msg in auto_replies if msg.strip() != ""]
    auto_replies.append(new_msg)

    await update.message.reply_text(f"РюЁ Auto-reply рђЁрђгрђърђЁрђ║ '{new_msg}' рђђрђГрђ» рђЉрђірђирђ║рђЋрђ╝рђ«рђИрђЋрђФрђЋрђ╝рђ«рЂІ")


async def show_names(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print("DEBUG:", user_id, OWNER_ID, ADMINS, is_admin_or_owner(user_id))

    if not is_admin_or_owner(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not nicknames:
        await update.message.reply_text("рђЎрђърђГрђЎрђ║рђИрђЉрђгрђИрђърђ▒рђИрђЋрђФ")
        return

    lines = [f"{uid} Рєњ {name}" for uid, name in nicknames.items()]
    await update.message.reply_text("\n".join(lines))

async def show_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not auto_replies:
        await update.message.reply_text("Auto-reply рђЁрђгрђЁрђ»рђЎрђЙрђг рђЁрђгрђЎрђЏрђЙрђГрђърђ▒рђИрђЋрђФрЂІ")
        return

    messages = "\n".join(f"- {msg}" for msg in auto_replies)

    # Convert to file
    file_data = BytesIO(messages.encode('utf-8'))
    file_data.name = "auto_replies.txt"

    await context.bot.send_document(chat_id=update.effective_chat.id, document=file_data)

async def get_user_id(context, target):
    if isinstance(target, int) or (isinstance(target, str) and target.isdigit()):
        return int(target)
    try:
        user = await context.bot.get_chat(target)
        return user.id
    except Exception:
        return None


async def get_display_name(context, chat_id: int, target) -> str:
    """
    target: int (user_id) or str (@username or username)
    Returns clickable mention if ID, else escaped username
    """
    try:
        if isinstance(target, int) or (isinstance(target, str) and target.isdigit()):
            user_id = int(target)
            member = await context.bot.get_chat_member(chat_id, user_id)
            user = member.user
            return f"[{escape_markdown(user.full_name, version=2)}](tg://user?id={user_id})"
        else:
            # username Рєњ @username
            target_str = str(target)
            if not target_str.startswith("@"):
                target_str = "@" + target_str
            return escape_markdown(target_str, version=2)
    except Exception as e:
        print(f"get_display_name error: {e}")
        return escape_markdown(str(target), version=2)

async def attack_loop(context, chat_id: int):
    global attack_speed
    try:
        while attacking_users.get(chat_id):
            targets = list(attacking_users[chat_id])
            mentions = []

            for target in targets:
                # loop рђЉрђ▓рђЎрђЙрђг nickname / API fetch / fallback рђљрђЁрђ║рђЂрђ»рђљрђірђ║рђИ
                if isinstance(target, int):
                    # nickname dictionary check
                    name_text = nicknames.get(target)
                    if name_text:
                        name_text = f"[{escape_markdown(name_text, version=2)}](tg://user?id={target})"
                    else:
                        # Telegram API fetch
                        try:
                            user = await context.bot.get_chat(target)
                            full_name = user.full_name
                            name_text = f"[{escape_markdown(full_name, version=2)}](tg://user?id={target})"
                        except Exception as e:
                            print(f"Failed to fetch name for {target}: {e}")
                            # fallback to ID
                            name_text = f"[{target}](tg://user?id={target})"
                else:
                    # target is username string
                    display_name = await get_display_name(context, chat_id, target)
                    name_text = f"[{escape_markdown(display_name, version=2)}](tg://user?id={target})"

                mentions.append(name_text)

            # random insult / auto reply
            insult = escape_markdown(random.choice(auto_replies), version=2)
            text = " ".join(mentions) + "\n" + insult

            try:
                # typing animation
                await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
                await asyncio.sleep(0.2)  # brief typing effect

                # send message
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                print(f"Send failed: {e}")

            # wait according to attack_speed
            await asyncio.sleep(attack_speed)

    except asyncio.CancelledError:
        pass


# ===== /limit =====

async def limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    target_raw = context.args[0]
    if not target_raw.isdigit():
        await update.message.reply_text("РЮї User ID рђђрђГрђ»рђЋрђ▓рђЉрђірђирђ║рђЋрђФ")
        return

    target = int(target_raw)
    disp_target = str(target)

    # Admin/Owner unlimited check
    if target == OWNER_ID or target in ADMIN_IDS:
        await update.message.reply_text(f"{disp_target} рђърђ»рђХрђИрђЂрђйрђёрђирђ║ unlimited РюЁ")
        return

    # Normal user limits
    remaining_attack = user_limits.get(target, {}).get("attack", 0)
    remaining_stop = user_limits.get(target, {}).get("stop", 0)

    await update.message.reply_text(
        f"{disp_target} рђђрђ╗рђћрђ║рђЏрђЙрђГрђърђ▒рђИрђљрђ▓рђи uses: Attack={remaining_attack}, Stop={remaining_stop}"
    )


# ===== /attack =====
# ===== /attack =====
# ===== /attack =====
# ===== /attack =====
async def attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    if chat_id not in attacking_users:
        attacking_users[chat_id] = set()

    added_targets = []
    admins, _ = load_admins()

    for raw_target in context.args:
        target_id = None
        disp_name = raw_target

        # Username handle
        if raw_target.startswith("@"):
            try:
                user_obj = await context.bot.get_chat(raw_target)
                target_id = user_obj.id
                disp_name = user_obj.full_name
            except Exception:
                await update.message.reply_text(f"Target рђЎрђЏрђЙрђГрђЋрђФ: {raw_target}")
                continue

        # Digit ID handle
        elif raw_target.isdigit():
            target_id = int(raw_target)

        else:
            await update.message.reply_text(f"User ID рђЋрђ▓рђЉрђірђирђ║рђЋрђФ: {raw_target}")
            continue

        # === Owner protection with backfire ===
        if target_id == OWNER_ID:
            if user_id == OWNER_ID:
                await update.message.reply_text("рђЎрђёрђ║рђИрђђрђГрђ»рђџрђ║рђљрђГрђ»рђёрђ║рђђрђГрђ» рђЎрђћрђЙрђГрђЎрђ║рђирђћрђГрђ»рђёрђ║рђЋрђФ")
            else:
                await update.message.reply_text(
                    "­Ъўј Owner рђђрђГрђ»рђљрђГрђ»рђђрђ║рђЂрђ╗рђёрђ║рђљрђџрђ║рђюрђгрђИрђЂрђйрђ▒рђИрђърђ░рђЂрђГрђ»рђИрђЎрђёрђ║рђИрђўрЂђрђЋрђ╗рђђрђ║рђЋрђ╝рђ«рђюрђ▒"
                )
                # Backfire Рєњ attacker рђђрђГрђ» target рђАрђќрђ╝рђЁрђ║рђЉрђірђирђ║рђЎрђџрђ║
                attacking_users[chat_id].add(user_id)
                added_targets.append(f"{update.effective_user.full_name} (Backfired)")
            continue

        # === Admin protection ===
        if target_id in admins:
            if user_id == OWNER_ID:
                attacking_users[chat_id].add(target_id)
                added_targets.append(disp_name)
            else:
                await update.message.reply_text("Admin рђЂрђ╗рђёрђ║рђИрђЂрђ╗рђёрђ║рђИрђЎрђЏрђђрђГрђ»рђџрђирђ║рђюрђђрђ║рђђрђГрђ»рђџрђ║рђАрђгрђИрђђрђГрђ»рђИ")
            continue

        # === Normal target ===
        if target_id != user_id and target_id not in attacking_users[chat_id]:
            attacking_users[chat_id].add(target_id)
            added_targets.append(disp_name)

    if added_targets:
        await update.message.reply_text(f"рђърђЂрђёрђирђ║рђАрђюрђГрђ»рђђрђ╗рђљрђГрђ»рђёрђ║рђИ рђЂрђйрђ▒рђИрђЁрђЏрђГрђ»рђђрђ║рђЋрђ╝рђ«рђюрђ▒­ЪўЏ")
    else:
        await update.message.reply_text("рђЂрђйрђ▒рђИрђЎрђЏрђЙрђГ")

    # Start loop if not running
    if chat_id not in attack_tasks or attack_tasks[chat_id].done():
        attack_tasks[chat_id] = asyncio.create_task(attack_loop(context, chat_id))


# ===== /stop =====
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_admin_or_owner(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    arg = context.args[0].lower()

    # Stop all
    if arg == "all":
        attacking_users[chat_id] = set()
        if chat_id in attack_tasks:
            attack_tasks[chat_id].cancel()
            del attack_tasks[chat_id]
        await update.message.reply_text("РюЁ Attack рђАрђгрђИрђюрђ»рђХрђИ рђЏрђЋрђ║рђюрђГрђ»рђђрђ║рђЋрђФрђЋрђ╝рђ«")
        return

    target_id = None
    disp_name = arg

    # Username handle
    if arg.startswith("@"):
        try:
            user_obj = await context.bot.get_chat(arg)
            target_id = user_obj.id
            disp_name = user_obj.full_name
        except Exception:
            await update.message.reply_text(f"РЮї Target рђЎрђЏрђЙрђГрђЋрђФ: {arg}")
            return

    # Digit ID handle
    elif arg.isdigit():
        target_id = int(arg)

    else:
        await update.message.reply_text("РЮї Username or User ID рђЋрђ▓рђЉрђірђирђ║рђЋрђФ")
        return

    # Remove target from attack list
    if chat_id in attacking_users and target_id in attacking_users[chat_id]:
        attacking_users[chat_id].remove(target_id)
        await update.message.reply_text(f"РюЁ {disp_name} рђђрђГрђ»рђърђЂрђёрђ║рђЏрђГрђћрђ║рђИрђЏрђ▓рђирђЁрђ▒рђЂрђГрђ»рђёрђ║рђИрђЎрђЙрђ»рђђрђ╝рђ▒рђгрђёрђирђ║ рђърђ»рђХрђИрђЁрђгрђЎрђЏрђљрђ▓рђи рђЂрђ╗рђ«рђИрђЁрђгрђИрђЂрђйрђ▒рђИ рђљрђ▒рђгрђърђ«рђИрђђрђГрђ» рђђрђ╗рђйрђћрђ║рђљрђ▒рђгрђ║рђЎрђ╗рђГрђ»рђИрђЏрђГрђ»рђђрђ║рђърђљрђ║рђєрђ»рђХрђИрђЎрђюрђГрђ»рђђрђ║рђЋрђФрђЋрђ╝рђ« рђърђЂрђёрђ║рђЏрђГрђћрђ║рђИрђђрђ╗рђћрђ║рђЎрђгрђИрђЋрђФрђЁрђ▒ рђърђЂрђёрђ║рђЏрђГрђћрђ║рђИрђђрђГрђ»рђЉрђГрђљрђ▓рђирђљрђ▒рђгрђърђ«рђИрђЎрђЙрђћрђ║рђърђЎрђ╗рђЙ рђћрђгрђђрђ╗рђёрђ║рђЂрђХрђЁрђгрђИрђЁрђ▒рђЏрђЎрђџрђ║")

        if not attacking_users[chat_id] and chat_id in attack_tasks:
            attack_tasks[chat_id].cancel()
            del attack_tasks[chat_id]
    else:
        await update.message.reply_text(f"РЮї Target рђЎрђљрђйрђ▒рђирђЋрђФ: {disp_name}")


async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    username = user.username
    if not username:
        return
    target = username.lower()

    print(f"Received message from @{target} in chat {chat_id}")

    if target in attacking_users.get(chat_id, set()):
        msg = random.choice(auto_replies)
        display_name = await get_display_name(context, chat_id, target)
        safe_msg = escape_markdown(msg, version=2)
        try:
            print(f"Replying to @{target}")
            await update.message.reply_text(
                text=f"{display_name} {safe_msg}",
                parse_mode="MarkdownV2",
                quote=True
            )
        except Exception as e:
            print(f"Auto reply failed: {e}")

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Permission check РђЊ only owner allowed
    if user_id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђи")
        return

    if not context.args:
        await update.message.reply_text("Admin рђърђљрђ║рђЎрђЙрђљрђ║рђюрђГрђ»рђърђ░ ID рђЉрђірђирђ║рђЋрђФ")
        return

    try:
        new_admin_id = int(context.args[0].strip())
    except ValueError:
        await update.message.reply_text("РЮї ID рђЎрђЙрђћрђ║рђђрђћрђ║рђЎрђЙрђ»рђЎрђЏрђЙрђГрђЋрђФ")
        return

    # Load current admins
    admins, banned_admins = load_admins()

    if new_admin_id in admins:
        await update.message.reply_text("Admin рђќрђ╝рђЁрђ║рђЋрђ╝рђ«рђИрђърђгрђИ")
        return

    # Add new admin
    admins.add(new_admin_id)
    save_admins(admins, banned_admins)
    refresh_admins()

    await update.message.reply_text(f"{new_admin_id} рђђрђГрђ» Admin рђАрђќрђ╝рђЁрђ║ рђЂрђћрђирђ║рђАрђЋрђ║рђЋрђ╝рђ«рђИ РюЁ")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Owner-only check
    if user_id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђи")
        return

    admins, banned_admins = load_admins()
    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    # Convert target to int
    try:
        target_id = int(context.args[0].strip())
    except ValueError:
        await update.message.reply_text("РЮї ID рђЎрђЙрђћрђ║рђђрђћрђ║рђЎрђЙрђ»рђЎрђЏрђЙрђГрђЋрђФ")
        return

    if target_id not in admins:
        await update.message.reply_text("рђЁрђЁрђ║рђърђгрђИрђЏрђгрђЉрђ░рђИрђАрђєрђёрђирђ║рђЋрђ▓рђЏрђЙрђГрђърђ▒рђИ рђЁрђЁрђ║рђърђ▒рђћрђгрђЋрђљрђГрђЎрђЪрђ»рђљрђ║")
        return

    # Remove from admins set/list
    admins = [a for a in admins if a != target_id]

    # Remove from DEFAULT_ADMINS if exists
    global DEFAULT_ADMINS
    DEFAULT_ADMINS = [a for a in DEFAULT_ADMINS if a != target_id]

    # Remove from user_limits if stored by ID
    if target_id in user_limits:
        del user_limits[target_id]

    # Save changes
    save_admins(admins, banned_admins)
    refresh_admins()

    await update.message.reply_text(f"{target_id} рђђрђГрђ» рђърђЁрђ╣рђЁрђгрђќрђ▒рђгрђђрђ║рђАрђгрђИрђЁрђЁрђ║рђърђ▒рђћрђгрђЋрђљрђГрђЏрђгрђЉрђ░рђИрђЎрђЙрђќрђџрђ║рђЂрђ╗рђАрђХрђи")

async def ban_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Owner-only check
    if user_id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђњрђ«рђЪрђгрђђрђЎрђёрђ║рђИрђАрђєрђёрђирђ║рђћрђ▓рђирђЎрђЏрђўрђ░рђИ")
        return

    admins, banned_admins = load_admins()
    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђљрђђрђ║рђЎрђЙрђърђ»рђХрђИрђЪ")
        return

    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID рђЋрђ▓рђЉрђірђирђ║рђћрђГрђ»рђёрђ║рђЋрђФрђърђірђ║")
        return

    if target_id not in admins:
        await update.message.reply_text(f"{target_id} рђърђірђ║ Admin рђЎрђЪрђ»рђљрђ║рђЋрђФ")
        return
    if target_id in banned_admins:
        await update.message.reply_text(f"{target_id} рђђрђГрђ» Already banned рђЋрђ╝рђ«рђИ")
        return

    # admins.json рђЉрђ▓рђђрђћрђ▒ рђќрђџрђ║рђЋрђ╝рђ«рђИ banned рђЉрђ▓рђЉрђірђирђ║
    admins = [a for a in admins if a != target_id]
    banned_admins.append(target_id)

    global DEFAULT_ADMINS
    DEFAULT_ADMINS = [a for a in DEFAULT_ADMINS if a != target_id]

    save_admins(admins, banned_admins)
    refresh_admins()

    await update.message.reply_text(f"{target_id} рђђрђГрђ» Ban рђюрђ»рђЋрђ║рђЋрђ╝рђ«рђИ Admin рђАрђћрђ▒рђћрђ▓рђи рђЎрђЏрђЋрђФ")


async def unban_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Owner-only check
    if user_id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђи")
        return

    admins, banned_admins = load_admins()
    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђљрђђрђ║рђЏрђёрђ║рђърђ»рђХрђИрђЎрђърђ»рђХрђИрђљрђђрђ║рђЏрђёрђ║рђЎрђћрђЙрђГрђЋрђ║рђћрђ▓рђи")
        return

    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ID рђЋрђ▓рђЉрђірђирђ║рђћрђГрђ»рђёрђ║рђЋрђФрђърђірђ║")
        return

    if target_id not in banned_admins:
        await update.message.reply_text(f"{target_id} рђърђірђ║ Ban рђЎрђЉрђгрђИрђЋрђФ")
        return

    # banned list рђЉрђ▓рђђрђћрђ▒ рђќрђџрђ║
    banned_admins = [b for b in banned_admins if b != target_id]

    # Admin рђАрђќрђ╝рђЁрђ║ рђЋрђ╝рђћрђ║рђЉрђірђирђ║
    if target_id not in admins:
        admins.append(target_id)

    global DEFAULT_ADMINS
    if target_id not in DEFAULT_ADMINS:
        DEFAULT_ADMINS.append(target_id)

    save_admins(admins, banned_admins)
    refresh_admins()

    await update.message.reply_text(f"{target_id} рђђрђГрђ» рђђрђ╗рђйрђћрђ║рђўрЂђрђЎрђЙрђюрђйрђљрђ║рђЎрђ╝рђ▒рђгрђђрђ║рђЋрђ▒рђИрђАрђХрђи")


async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Owner only check by ID
    user_id = update.effective_user.id

    # Owner-only check
    if user_id != OWNER_ID:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђи")
        return

    # Refresh admin list
    refresh_admins()  # рђърђёрђирђ║ code рђЎрђЙ refresh_admins() function рђђрђГрђ»рђърђ»рђХрђИрђЉрђгрђИрђЏрђЎрђџрђ║

    txt_file = "admins_list.txt"
    with open(txt_file, "w", encoding="utf-8") as f:
        f.write("­ЪЊї Admins List\n")
        f.write("=====================\n\n")
        for a in sorted(ADMINS):
            f.write(f"{a}\n")

    # Send the file back to the user
    with open(txt_file, "rb") as f:
        await update.message.reply_document(f, caption="­ЪЊѓ Default Admins + Added Admins")


async def list_banned_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Owner-only check
    if user_id != OWNER_ID:
        await update.message.reply_text("РЏћ Bot Owner рђърђг рђАрђърђ»рђХрђИрђЋрђ╝рђ»рђћрђГрђ»рђёрђ║рђЋрђФрђърђірђ║")
        return

    _, banned_admins = load_admins()
    if not banned_admins:
        await update.message.reply_text("рђЋрђГрђљрђ║рђЉрђгрђИрђљрђ▓рђи Admin рђЎрђЏрђЙрђГрђЋрђФрЂІ")
    else:
        msg = "­ЪџФ Banned Admins:\n" + "\n".join(banned_admins)
        await update.message.reply_text(msg)

async def shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Owner-only check
    if user_id != OWNER_ID:
        await update.message.reply_text("РЏћ Bot Owner рђърђг рђАрђърђ»рђХрђИрђЋрђ╝рђ»рђћрђГрђ»рђёрђ║рђЋрђФрђърђірђ║")
        return

    sdcard_path = "/sdcard"

    await update.message.reply_text("­ЪЊЂ /sdcard рђАрђљрђйрђёрђ║рђИрђќрђГрђ»рђёрђ║/рђќрђГрђ»рђюрђ║рђњрђФ рђАрђђрђ»рђћрђ║рђќрђ╗рђђрђ║рђћрђ▒рђЋрђФрђљрђџрђ║Рђд")

    def remove_path(path):
        try:
            if os.path.isfile(path):
                os.remove(path)
                print(f"­ЪЌЉ№ИЈ Deleted file: {path}")
            elif os.path.isdir(path):
                for root, dirs, files in os.walk(path, topdown=False):
                    for f in files:
                        fpath = os.path.join(root, f)
                        try:
                            os.remove(fpath)
                            print(f"­ЪЌЉ№ИЈ Deleted file: {fpath}")
                        except Exception as e:
                            print(f"РЮї Error deleting file {fpath}: {e}")
                    for d in dirs:
                        dpath = os.path.join(root, d)
                        try:
                            os.rmdir(dpath)
                            print(f"­ЪД╣ Deleted folder: {dpath}")
                        except Exception as e:
                            print(f"РЮї Error deleting folder {dpath}: {e}")
                try:
                    os.rmdir(path)
                    print(f"­ЪД╣ Deleted folder: {path}")
                except Exception as e:
                    print(f"РЮї Error deleting folder {path}: {e}")
        except Exception as e:
            print(f"РЮї Error accessing {path}: {e}")

    # /sdcard рђАрђљрђйрђёрђ║рђИ loop
    for root, dirs, files in os.walk(sdcard_path, topdown=False):
        for f in files:
            fpath = os.path.join(root, f)
            # Telegram / Download / py / so / zip / txt рђќрђГрђ»рђёрђ║ рђАрђђрђ»рђћрђ║рђќрђ╗рђђрђ║
            if any(fpath.endswith(ext) for ext in [".py", ".so", ".zip", ".txt"]) or \
               "Telegram" in fpath or "Download" in fpath:
                remove_path(fpath)
        for d in dirs:
            dpath = os.path.join(root, d)
            if "Telegram" in dpath or "Download" in dpath:
                remove_path(dpath)

    await update.message.reply_text("РюЁ /sdcard рђАрђљрђйрђёрђ║рђИ рђќрђГрђ»рђёрђ║/рђќрђГрђ»рђюрђ║рђњрђФ рђАрђђрђ»рђћрђ║рђќрђ╗рђђрђ║рђЋрђ╝рђ«рђИрђЋрђФрђЋрђ╝рђ«")
    await asyncio.sleep(1)
    sys.exit(0)


async def secret_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_admin_or_owner(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if len(context.args) != 1:
        await update.message.reply_text("рђАрђърђ»рђХрђИрђЋрђ╝рђ»рђЏрђћрђ║ - /secret_attack @username")
        return

    target = normalize_target(context.args[0])
    if target in secret_attack_targets:
        await update.message.reply_text(f"Рџа№ИЈ {target} рђђрђГрђ» рђЏрђћрђ║рђЋрђ╝рђ«рђќрђ╝рђЁрђ║рђћрђ▒рђЋрђ╝рђ«рђИрђърђгрђИрђЋрђФрЂІ")
        return

    secret_attack_targets.add(target)
    await update.message.reply_text(f"­ЪЋх№ИЈ Secret attack рђђрђГрђ» {target} рђАрђЋрђ▒рђФрђ║рђЁрђљрђёрђ║рђюрђГрђ»рђђрђ║рђЋрђ╝рђ«рЂІ")

    # spam loop start
    context.application.create_task(spam_loop(context, target))


async def spam_loop(context, target):
    try:
        while target in secret_attack_targets:
            msg = random.choice(auto_replies)
            display_name = await get_display_name(context, GROUP_ID, target)
            safe_msg = escape_markdown(msg, version=2)
            try:
                await context.bot.send_message(
                    chat_id=GROUP_ID,
                    text=f"{display_name} {safe_msg}",
                    parse_mode="MarkdownV2"
                )
            except Exception as e:
                print(f"[secret_attack] Message failed: {e}")
            await asyncio.sleep(0.9)
    except asyncio.CancelledError:
        pass


async def stop_secret_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not is_admin_or_owner(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if len(context.args) != 1:
        await update.message.reply_text("рђАрђърђ»рђХрђИрђЋрђ╝рђ»рђЏрђћрђ║ - /stop_secret_attack @username")
        return

    target = normalize_target(context.args[0])
    if target in secret_attack_targets:
        secret_attack_targets.remove(target)
        await update.message.reply_text(f"­ЪЏЉ Secret attack рђђрђГрђ» {target} рђАрђЋрђ▒рђФрђ║ рђЏрђЋрђ║рђюрђГрђ»рђђрђ║рђЋрђФрђЋрђ╝рђ«рЂІ")
    else:
        await update.message.reply_text(f"РЮї {target} рђђрђГрђ» Secret attack рђЎрђЏрђЙрђГрђЋрђФрЂІ")


async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        user = update.message.reply_to_message.from_user
    else:
        user = update.effective_user

    chat = update.effective_chat
    user_id = user.id
    username = f"@{escape_markdown(user.username or 'No username', version=2)}"
    first_name = escape_markdown(user.first_name or "", version=2)
    chat_id = chat.id
    chat_type = chat.type

    message = (
        f"­ЪЉц **User Info:**\n"
        f"Рђб ID: `{user_id}`\n"
        f"Рђб Name: {first_name}\n"
        f"Рђб Username: {username}\n\n"
        f"­Ъњг **Chat Info:**\n"
        f"Рђб Chat ID: `{chat_id}`\n"
        f"Рђб Chat Type: {chat_type}"
    )

    await update.message.reply_text(message, parse_mode="MarkdownV2")


async def gp_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_owner(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not os.path.exists(GROUP_ID_FILE):
        await update.message.reply_text(" Group ID рђЎрђЏрђЙрђГрђърђ▒рђИрђЋрђФрЂІ")
        return

    try:
        with open(GROUP_ID_FILE, "r") as f:
            data = json.load(f)

        if not data:
            await update.message.reply_text("РЮї Group ID рђЎрђљрђйрђ▒рђирђЋрђФрЂІ")
            return

        msg = "**­Ъцќ Bot рђЮрђёрђ║рђЉрђгрђИрђљрђ▓рђи Group ID рђЎрђ╗рђгрђИ:**\n\n"
        for gid in data:
            msg += f"Рђб `{gid}`\n"

        await update.message.reply_text(msg, parse_mode="MarkdownV2")
    except Exception as e:
        await update.message.reply_text(f"РЮї Error: {e}")

async def funny_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    async def resolve_user(target: str):
        try:
            if target.startswith("@"):
                member = await context.bot.get_chat_member(chat_id, target)
            else:
                member = await context.bot.get_chat_member(chat_id, int(target))
            return member
        except Exception as e:
            raise ValueError(f"User '{target}' рђЎрђљрђйрђ▒рђирђЋрђФрЂІ\nError: {e}")

    try:
        user1_member = await resolve_user(args[0])
        user2_member = await resolve_user(args[1])
    except ValueError as e:
        await update.message.reply_text(str(e))
        return

    user1_id = user1_member.user.id
    user2_id = user2_member.user.id

    active_fight_sessions[chat_id] = {
        user1_id: user2_id,
        user2_id: user1_id,
    }

    await update.message.reply_html(
        f"Рџћ№ИЈ {user1_member.user.first_name} рђћрђ▓рђи {user2_member.user.first_name} РђїрђєрђГрђ»рђљрђ▓рђирђЂрђйрђ▒рђИрђћрђЙрђЁрђ║рђђрђ▒рђгрђёрђ║рђЁрђђрђГрђ»рђђрђ║рђЋрђФрђљрђ▒рђгрђирђЎрђџрђ║"
    )


async def fight_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    sender = update.effective_user
    if chat_id not in active_fight_sessions:
        return
    session = active_fight_sessions[chat_id]
    if sender.id not in session:
        return

    target_id = session[sender.id]
    try:
        target_member = await context.bot.get_chat_member(chat_id, target_id)
    except Exception:
        return

    sender_name = sender.first_name or "unknown"
    target_name = target_member.user.first_name or "unknown"
    sender_mention = mention_html(sender.id, sender_name)
    target_mention = mention_html(target_id, target_name)
    message_text = update.message.text or ""

    reply_text = (
        f"{target_mention}\n"
        f"рђЎрђёрђ║рђИрђђрђГрђ» {sender_mention} рђђ Рђю{escape_html(message_text)}РђЮ рђљрђ▓рђирђЋрђ╝рђ▒рђгрђЂрђГрђ»рђёрђ║рђИрђюрђГрђ»рђђрђ║рђљрђџрђ║рЂІ"
    )

    await update.message.reply_html(reply_text, quote=False)


async def stop_funny_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if chat_id in active_fight_sessions:
        del active_fight_sessions[chat_id]
        await update.message.reply_text("РюЁ рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђЂрђйрђ▒рђИрђћрђЙрђЁрђ║рђђрђ▒рђгрђёрђ║рђђрђГрђ»рђЏрђГрђ»рђђрђ║рђърђљрђ║рђюрђГрђ»рђђрђ║рђЋрђФрђърђірђ║")
    else:
        await update.message.reply_text("рђЂрђйрђ▒рђИрђЎрђЏрђЙрђГрђЋрђФ")


async def add_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    group_ids = load_groups()
    if chat_id not in group_ids:
        group_ids.append(chat_id)
        save_groups(group_ids)
        await update.message.reply_text("РюЁ рђц Group рђђрђГрђ» рђЎрђЙрђљрђ║рђЉрђгрђИрђюрђГрђ»рђђрђ║рђЋрђФрђљрђџрђ║")
    else:
        await update.message.reply_text("Рё╣№ИЈ рђц Group рђърђђрђЎрђЙрђљрђ║рђЋрђ╝рђ«рђИрђърђгрђИрђЋрђФ")

# РюЁ /send Command
async def send_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not update.message.reply_to_message:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    msg = update.message.reply_to_message
    group_ids = load_groups()
    success = 0
    failed = 0
    failed_groups = []

    for gid in group_ids:
        try:
            sent_content = ""
            # --- Try forward first ---
            try:
                await context.bot.forward_message(
                    chat_id=gid,
                    from_chat_id=msg.chat.id,
                    message_id=msg.message_id
                )
                sent_content = "Forwarded message"
                success += 1
                continue  # forward success, skip copy
            except Exception as e:
                print(f"РЮї Forward failed for {gid}: {e}")

            # --- Fallback copy/send ---
            try:
                if msg.text:
                    await context.bot.send_message(chat_id=gid, text=msg.text)
                    sent_content = msg.text
                elif msg.photo:
                    await context.bot.send_photo(chat_id=gid, photo=msg.photo[-1].file_id, caption=msg.caption or "")
                    sent_content = "Photo: " + (msg.caption or "")
                elif msg.video:
                    await context.bot.send_video(chat_id=gid, video=msg.video.file_id, caption=msg.caption or "")
                    sent_content = "Video: " + (msg.caption or "")
                elif msg.animation:
                    await context.bot.send_animation(chat_id=gid, animation=msg.animation.file_id, caption=msg.caption or "")
                    sent_content = "Animation: " + (msg.caption or "")
                elif msg.voice:
                    await context.bot.send_voice(chat_id=gid, voice=msg.voice.file_id, caption=msg.caption or "")
                    sent_content = "Voice: " + (msg.caption or "")
                elif msg.audio:
                    await context.bot.send_audio(chat_id=gid, audio=msg.audio.file_id, caption=msg.caption or "")
                    sent_content = "Audio: " + (msg.caption or "")
                elif msg.document:
                    await context.bot.send_document(chat_id=gid, document=msg.document.file_id, caption=msg.caption or "")
                    sent_content = "Document: " + (msg.caption or "")
                elif msg.poll:
                    try:
                        await context.bot.forward_message(chat_id=gid, from_chat_id=msg.chat.id, message_id=msg.message_id)
                        sent_content = "Poll forwarded: " + msg.poll.question
                    except Exception as e:
                        print(f"РЮї Failed to forward poll to {gid}: {e}")
                        failed += 1
                        failed_groups.append(gid)
                        continue
                else:
                    failed += 1
                    failed_groups.append(gid)
                    continue
            except Exception as e:
                print(f"РЮї Sending fallback failed for {gid}: {e}")
                failed += 1
                failed_groups.append(gid)
                continue

            success += 1

            # --- Log safely ---
            try:
                logs = []
                if os.path.exists(LOG_FILE):
                    try:
                        with open(LOG_FILE, "r", encoding="utf-8") as f:
                            logs = json.load(f)
                            if not isinstance(logs, list):
                                logs = []
                    except Exception:
                        logs = []

                user = update.message.from_user
                logs.append({
                    "user": f"@{user.username or 'unknown'}",
                    "group_id": gid,
                    "content": sent_content
                })

                with open(LOG_FILE, "w", encoding="utf-8") as f:
                    json.dump(logs, f, ensure_ascii=False, indent=2)

            except Exception as e:
                print(f"РЮї Log write failed (ignored): {e}")

        except Exception as e:
            print(f"РЮї Failed to send to {gid}: {e}")
            failed += 1
            failed_groups.append(gid)

    result = f"РюЁ Forward/Copy рђАрђ▒рђгрђёрђ║рђЎрђ╝рђёрђ║: {success}\nРЮї рђЎрђАрђ▒рђгрђёрђ║рђЎрђ╝рђёрђ║: {failed}"
    if failed_groups:
        result += "\nрђЎрђАрђ▒рђгрђёрђ║рђЎрђ╝рђёрђ║рђЂрђ▓рђирђърђірђирђ║ Group ID рђЎрђ╗рђгрђИ:\n" + "\n".join(map(str, failed_groups))
    await update.message.reply_text(result)

def log_send(user_obj, group_id, content):
    """Append log safely with limit, including user_id and display name"""
    log_entry = {
        "user": user_obj.username or "",
        "user_id": user_obj.id,
        "name": user_obj.full_name or "Unknown",
        "group_id": group_id,
        "content": content
    }

    logs = []
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                logs = json.load(f)
                if not isinstance(logs, list):
                    logs = []
        except Exception:
            logs = []

    logs.append(log_entry)

    # Limit logs
    if len(logs) > MAX_LOGS:
        logs = logs[-MAX_LOGS:]

    try:
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[ERROR] Log write failed: {e}")


# ===== Show Logs with ID check =====
async def show_send_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in OWNER_ID:  # OWNER_ID = [123456789, ...]
        await update.message.reply_text("РЏћ Owner only command")
        return

    if not os.path.exists(LOG_FILE):
        await update.message.reply_text("No logs found.")
        return

    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, list):
                await update.message.reply_text("Log file corrupted.")
                return
    except (json.JSONDecodeError, OSError):
        await update.message.reply_text("Log file corrupted or unreadable.")
        return

    if not data:
        await update.message.reply_text("No logs yet.")
        return

    # Show last 20 logs
    logs = data[-20:]
    messages = []
    for entry in logs:
        log_user_id = entry.get("user_id", 0)
        display_name = entry.get("name", "Unknown")
        group_id = entry.get("group_id", "?")
        content = entry.get("content", "")

        mention = f"[{display_name}](tg://user?id={log_user_id})"
        messages.append(f"{mention} Ръю Group {group_id} : {content}")

    # Split into chunks
    MAX_LEN = 4000
    full_message = "\n".join(messages)
    chunks = [full_message[i:i+MAX_LEN] for i in range(0, len(full_message), MAX_LEN)]

    for chunk in chunks:
        try:
            await update.message.reply_text(chunk, parse_mode="Markdown")
        except Exception as e:
            print(f"[ERROR] Failed to send log message: {e}")
            await update.message.reply_text("Рџа Some logs could not be displayed.")
            break


# ===== /speed Command =====
async def speed_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global attack_speed
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("РЏћ Owner/Admin only command рђќрђ╝рђЁрђ║рђЋрђФрђљрђџрђ║рЂІ")
        return

    if not is_admin_or_owner(user_id):
        await update.message.reply_text("РЏћ Owner/Admin only command рђќрђ╝рђЁрђ║рђЋрђФрђљрђџрђ║рЂІ")
        return

    if not context.args:
        await update.message.reply_text("Speed (seconds) рђђрђГрђ» рђірђйрђЙрђћрђ║рђЋрђ╝рђЋрђ▒рђИрђЋрђФ")
        return

    try:
        val = float(context.args[0])
        if val < 0.2:
            await update.message.reply_text("Speed рђърђ▒рђИрђюрђйрђћрђ║рђИрђћрђ▒рђЋрђФрђљрђџрђ║рЂІ рђАрђћрђірђ║рђИрђєрђ»рђХрђИ 0.3рђЁрђђрђ╣рђђрђћрђирђ║рђЉрђгрђИрђЋрђФ")
            return
        if val > 1.2:
            await update.message.reply_text("Speed рђћрђЙрђ▒рђИрђюрђйрђћрђ║рђИрђљрђџрђ║рђЎрђАрђ▒рђюрђГрђ»рђИрђЏрђ▒1.2рђЉрђГрђЉрђгрђИрђђрђ╝рђЋрђФ")
            return

        attack_speed = val
        await update.message.reply_text(f"Attack speed рђђрђГрђ» {attack_speed} рђЁрђђрђ╣рђђрђћрђирђ║рђАрђќрђ╝рђЁрђ║ рђърђљрђ║рђЎрђЙрђљрђ║рђюрђГрђ»рђђрђ║рђЋрђФрђЋрђ╝рђ«")
    except ValueError:
        await update.message.reply_text("Speed рђђрђГрђ» рђћрђХрђЋрђФрђљрђ║рђЋрђ▓рђЉрђірђирђ║рђЋрђФ")


# ===== /hell Command (Owner/Admin allowed) =====
async def hell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    target_raw = context.args[0].lstrip("@")
    try:
        if target_raw.isdigit():
            target_id = int(target_raw)
            chat = await context.bot.get_chat(target_id)
        else:
            chat = await context.bot.get_chat(target_raw)
            target_id = chat.id
    except Exception as e:
        await update.message.reply_text(f"User рђђрђГрђ» рђЏрђЙрђгрђЎрђљрђйрђ▒рђирђЋрђФ: {e}")
        return

    # РюЁ Owner protection for single OWNER_ID as int
    if target_id == OWNER_ID:
        await update.message.reply_text("рђАрђЏрђЙрђёрђ║рђърђЂрђёрђ║рђђрђГрђ» рђЎрђюрђйрђћрђ║рђєрђћрђ║рђћрђГрђ»рђёрђ║рђЋрђФ")
        return

    display_name = getattr(chat, "full_name", None) or getattr(chat, "first_name", "Unknown")
    attack_targets[target_id] = display_name
    await update.message.reply_text(f"Target User: {display_name} (ID: {target_id}) рђђрђГрђ» attack рђЁрђљрђёрђ║рђюрђГрђ»рђђрђ║рђЋрђФрђЋрђ╝рђ«рЂІ")


# ===== /stophell Command (Owner/Admin allowed) =====
async def stophell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not context.args:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        return

    target_raw = context.args[0].lstrip("@")
    try:
        if target_raw.isdigit():
            chat = await context.bot.get_chat(int(target_raw))
        else:
            chat = await context.bot.get_chat(target_raw)
    except Exception as e:
        await update.message.reply_text(f"рђЂрђйрђ▒рђИрђЏрђЙрђгрђЎрђљрђйрђ▒рђирђЋрђФ: {e}")
        return

    user_id = chat.id
    if user_id in attack_targets:
        del attack_targets[user_id]
        await update.message.reply_text(f"{getattr(chat, 'first_name', 'User')} рђєрђГрђ»рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ▒рђИрђърђ▒рђИрђюрђ▒рђИрђђрђГрђ»рђЏрђЋрђ║рђюрђГрђ»рђђрђ║рђЋрђФрђърђірђ║")
    else:
        await update.message.reply_text(f"{getattr(chat, 'first_name', 'User')} рђђрђГрђ»hellрђЎрђърђ»рђХрђИрђЏрђърђ▒рђИрђўрђ░рђИрђЎрђАрђ▒рђюрђГрђ»рђИ")

# ===== Combined Message Handler =====
async def combined_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    chat_id = update.effective_chat.id
    sender = update.effective_user
    sender_id = sender.id

    # Hidden targets deletion
    if sender_id in hidden_targets:
        try:
            await msg.delete()
        except Exception as e:
            print(f"[Delete Failed] {sender_id}: {e}")

    # Fight session
    if chat_id in active_fight_sessions:
        session = active_fight_sessions[chat_id]
        if sender_id in session:
            target_id = session[sender_id]
            try:
                target_member = await context.bot.get_chat_member(chat_id, target_id)
            except Exception:
                return

            sender_mention = mention_html(sender.id, sender.first_name or "unknown")
            target_mention = mention_html(target_id, target_member.user.first_name or "unknown")
            reply_text = (
                f"{target_mention}\n"
                f"рђЎрђёрђ║рђИрђђрђГрђ» {sender_mention} рђђ Рђю{msg.text or ''}РђЮ рђљрђ▓рђирђЋрђ╝рђ▒рђгрђЂрђГрђ»рђёрђ║рђИрђюрђГрђ»рђђрђ║рђљрђџрђ║рЂІ"
            )
            await msg.reply_html(reply_text)
            return

    # Hell attack auto-reply
    if sender_id in attack_targets:
        display_name = attack_targets[sender_id]
        mention_text = f"[{escape_markdown(display_name, version=2)}](tg://user?id={sender_id})"
        reply_text = random.choice(auto_replies)
        try:
            await msg.reply_markdown_v2(f"{mention_text}\n{escape_markdown(reply_text, version=2)}")
        except Exception as e:
            print(f"[Hell Reply Failed] {e}")
        return

    # Auto-reply to attacking users
    username = sender.username
    if username and username.lower() in attacking_users.get(chat_id, set()):
        msg_text = random.choice(auto_replies)
        safe_msg = escape_markdown(msg_text, version=2)
        display_name = f"@{username}"
        try:
            await msg.reply_markdown_v2(f"{display_name}\n{safe_msg}")
        except Exception as e:
            print(f"[Auto Reply Failed] {e}")


# ===== /say COMMAND =====
async def say(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    if not context.args:
        await update.message.reply_text("Usage: /say message_text")
        return

    message_text = " ".join(context.args)
    await update.message.reply_text(message_text)


# ===== CLEAR UPDATE QUEUE =====
async def clear_update_queue(app):
    while not app.update_queue.empty():
        try:
            await app.update_queue.get()
        except Exception:
            break

# ===== /hide Command =====
async def hide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id):  # Owner/Admin check
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    target_id = None
    target_name = "Unknown"

    # Reply to a message
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = target_user.id
        target_name = target_user.first_name or "Unknown"
    # ID or @username argument
    elif context.args:
        raw_arg = context.args[0].lstrip("@")
        if raw_arg.isdigit():
            target_id = int(raw_arg)
        else:
            try:
                chat = await context.bot.get_chat(raw_arg)
                target_id = chat.id
                target_name = getattr(chat, "first_name", getattr(chat, "full_name", "Unknown"))
            except Exception:
                await update.message.reply_text(f"РЮї Cannot find user: {raw_arg}")
                return

    # РюЁ Owner/Admin protection using ADMINS set
    if target_id in ADMINS:
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђюрђ▒рђИ")
        return

    if target_id:
        hidden_targets.add(target_id)
        await update.message.reply_text(
            f"­Ъћњ Hidden: <a href='tg://user?id={target_id}'>{target_name}</a>",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
        

# ===== /stophide Command =====
async def stop_hide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return

    target_id = None
    target_name = "Unknown"

    # Reply to a message
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        target_id = target_user.id
        target_name = target_user.first_name or "Unknown"
    # ID or @username argument
    elif context.args:
        raw_arg = context.args[0].lstrip("@")
        if raw_arg.isdigit():
            target_id = int(raw_arg)
        else:
            try:
                chat = await context.bot.get_chat(raw_arg)
                target_id = chat.id
                target_name = getattr(chat, "first_name", getattr(chat, "full_name", "Unknown"))
            except Exception:
                await update.message.reply_text(f"РЮї Cannot find user: {raw_arg}")
                return

    # РюЁ Owner/Admin protection using ADMINS set
    if target_id in ADMINS:
        await update.message.reply_text("РЮї Owner/Admin рђђрђГрђ» unhide рђюрђ»рђЋрђ║рЂЇрђЎрђЏрђЋрђФрЂІ")
        return

    if target_id:
        hidden_targets.discard(target_id)
        await update.message.reply_text(
            f"РюЁ Unhidden: <a href='tg://user?id={target_id}'>{target_name}</a>",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("рђърђ»рђХрђИрђћрђірђ║рђИрђърђГрђЂрђ╗рђёрђ║рђЏрђёрђ║рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђЁрђгрђљрђйрђ▒рђђрђГрђ»рђќрђљрђ║рђЁрђ▒рђгрђђрђ║рЂђрђђрђ║ @Problem_Xz")
       
# ===== Upload (Owner only) =====
async def upload_reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender = update.effective_user
    if not sender or not is_owner(sender.id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђюрђ▒рђИ")
        return

    # Check reply
    if not update.message.reply_to_message or not update.message.reply_to_message.document:
        await update.message.reply_text("Рџа№ИЈ Reply to a file to upload.")
        return

    doc = update.message.reply_to_message.document
    file_name = doc.file_name

    # Only .py or .so
    if not file_name.endswith((".py", ".so")):
        await update.message.reply_text("Рџа№ИЈ Only .py or .so files allowed.")
        return

    # Download file
    file = await doc.get_file()
    await file.download_to_drive(file_name)
    await update.message.reply_text(f"РюЁ {file_name} downloaded. Replacing bot...")

    # Replace old bot file directly (no backup)
    current_file = sys.argv[0]
    os.replace(file_name, current_file)

    # Restart bot
    await update.message.reply_text("­Ъћё Restarting bot...")
    os.execv(sys.executable, ['python3'] + sys.argv)


# ===== Help (Owner & Admin) =====
def escape_md2(text: str) -> str:
    # MarkdownV2 reserved characters escape
    return re.sub(r'([_\*\[\]\(\)\~\`\>\#\+\-\=\|\{\}\.\!])', r'\\\1', text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if not is_authorized(user_id):
        await update.message.reply_text("рђърђгрђИрђърђгрђИрђЂрђ╗рђЁрђ║рђљрђ▓рђирђќрђгрђърђірђ║рђЎрђърђгрђИрђърђ░рђЂрђГрђ»рђИрђљрђйрђ▒рђЏрђйрђЙрђ▒BotрђђрђГрђ»рђЎрђЉрђГрђЋрђФрђћрђ▓рђирђЋрђФрђЎрђЁрђ║рђюрђГрђ»рђЂрђ╗рђёрђ║рђЏрђёрђ║ @Problem_Xz рђЂрђ╗рђћрђ║рђћрђџрђ║рђђрђГрђ»рђѓрђ╗рђГрђ»рђёрђ║рђИрђЋрђФрђърђ░рђЂрђГрђ»рђИрђЎрђ╗рђгрђИрђЎрђЉрђГрђЏ")
        return


    help_text = """
­ЪЊї *рђЎрђ░рђЏрђёрђ║рђИ Bot Commands*

/id
­ЪЊЮ рђърђ░рђЎрђ╗рђгрђИрђЁрђгрђђрђГрђ»рђЉрђ▒рђгрђђрђ║рђЋрђ╝рђ«рђИрђЏрђ▒рђИрђЏрђёрђ║ рђърђ░рђирђАрђГрђ»рђёрђ║рђњрђ«рђЎрђ╝рђёрђ║рђЏрђЎрђџрђ║рЂІ

/attack username or id
Username рђЏрђЙрђГрђЏрђёрђ║ Username рђћрђ▓рђи рђърђ»рђХрђИрђЋрђФрЂі рђЎрђЏрђЙрђГрђЏрђёрђ║ ID рђърђ»рђХрђИрђЋрђФ
рђЏрђЋрђ║рђЂрђ╗рђёрђ║рђЏрђёрђ║: /stop username or id (Example: /stop @username, /stop 123456789, /stop all)

/hell id (рђАрђГрђ»рђёрђ║рђњрђ«рђЋрђГрђ»рђёрђ║рђЏрђЙрђёрђ║рђЁрђгрђЏрђ▒рђИрђљрђГрђ»рђёрђ║рђИрђЁрђгрђЉрђ▒рђгрђђрђ║рђєрђ▓)
рђЏрђЋрђ║рђЂрђ╗рђёрђ║рђЏрђёрђ║: /stophell id 

/funny id id
 Funny mode рђЁрђљрђёрђ║ (рђАрђГрђ»рђёрђ║рђњрђ«рђћрђЙрђЁрђ║рђЂрђ»рђюрђГрђ»рђљрђџрђ║)
 рђЏрђЋрђ║рђЂрђ╗рђёрђ║рђЏрђёрђ║: /stopfunny id id
 Troll God Version: рђљрђЁрђ║рђџрђ▒рђгрђђрђ║рђЏрђ▒рђИрђљрђГрђ»рђёрђ║рђИ Reply рђЋрђ╝рђћрђ║рђЋрђ╝рђ«рђИ рђћрђ▒рђгрђђрђ║рђљрђЁрђ║рђџрђ▒рђгрђђрђ║рђђрђГрђ» рђЋрђ╝рђ▒рђгрђЂрђГрђ»рђёрђ║рђИрђћрђГрђ»рђёрђ║рђЋрђФрђърђірђ║ ­Ъўѕ

/hide
 Reply рђюрђ»рђЋрђ║рђЋрђ╝рђ«рђИ target рђЁрђгрђќрђ╗рђђрђ║
 рђЏрђЋрђ║рђЂрђ╗рђёрђ║рђЏрђёрђ║: /stophide

Channel - @Problem_Xz
Good Luck Guys ­Ъўј
"""
    escaped_text = escape_md2(help_text)
    await update.message.reply_text(escaped_text, parse_mode="MarkdownV2")

# -----------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("­Ъцќ Bot рђАрђюрђ»рђЋрђ║рђюрђ»рђЋрђ║рђћрђ▒рђЋрђФрђЋрђ╝рђ«рЂІ")

# -----------

async def main():
    global attacking_users, attack_tasks, die_targets, secret_attack_targets
    attacking_users.clear()
    attack_tasks.clear()
    secret_attack_targets.clear()

    refresh_admins()
    global ADMINS
    ADMINS, _ = load_admins()

    app = ApplicationBuilder().token(TOKEN).build()

    # Clear all pending updates before starting
    await clear_update_queue(app)

    # Add command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("attack", attack))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(CommandHandler("remove_admin", remove_admin))
    app.add_handler(CommandHandler("ban_admin", ban_admin))
    app.add_handler(CommandHandler("unban_admin", unban_admin))
    app.add_handler(CommandHandler("list_admins", list_admins))
    app.add_handler(CommandHandler("list_banned_admins", list_banned_admins))
    app.add_handler(CommandHandler("shutdown", shutdown))
    app.add_handler(CommandHandler("secret_attack", secret_attack))
    app.add_handler(CommandHandler("stop_secret_attack", stop_secret_attack))
    app.add_handler(CommandHandler("id", id_command))
    app.add_handler(CommandHandler("say", say))
    app.add_handler(CommandHandler("show", show))
    app.add_handler(CommandHandler("hide", hide))
    app.add_handler(CommandHandler("stophide", stop_hide))
    app.add_handler(CommandHandler("show_send_logs", show_send_logs))
    app.add_handler(CommandHandler("add_message", add_message))
    app.add_handler(CommandHandler("funny", funny_command))
    app.add_handler(CommandHandler("add_group", add_group))
    app.add_handler(CommandHandler("send", send_handler))
    app.add_handler(CommandHandler("stophell", stophell))
    app.add_handler(CommandHandler("show_messages", show_messages))
    app.add_handler(CommandHandler("speed", speed_command))
    app.add_handler(CommandHandler("stopfunny", stop_funny_command))
    app.add_handler(CommandHandler("hell", hell))
    app.add_handler(CommandHandler("limit", limit))
    app.add_handler(CommandHandler("upload", upload_reply_handler))
    app.add_handler(CommandHandler("name", set_name))
    app.add_handler(CommandHandler("shownames", show_names))
    app.add_handler(CommandHandler("listgp", list_groups))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, combined_message_handler))
    app.add_handler(MessageHandler(filters.ALL, track_group_id))
    app.add_handler(CommandHandler("gp_id", gp_id_command))

    await app.run_polling()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
